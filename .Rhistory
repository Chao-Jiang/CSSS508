mutate(`Any Black`=`Any Black`/`Total Population`)
?spread
king_county <- get_acs(geography="tract", state="WA", county="King",
geometry = TRUE,
variables=c("B02001_001E", "B02009_001E"))
king_county %>% spread(variable, estimate)
king_county %>% group_by(GEOID) %>% spread(variable, estimate)
# census_api_key("PUT YOUR KEY HERE", install=TRUE)
king_county <- get_acs(geography="tract", state="WA", county="King",
geometry = TRUE,
variables=c("B02001_001E", "B02009_001E")) %>%
select(-moe) %>% spread(variable, estimate) %>%
rename(`Total Population`=B02001_001, `Any Black`=B02009_001) %>%
mutate(`Any Black`=`Any Black`/`Total Population`)
get_acs(geography="tract", state="WA", county="King",
geometry = TRUE,
variables=c("B02001_001E", "B02009_001E")) %>%
select(-moe) %>% spread(variable, estimate)
king_county %>% select(-moe)
king_county %>% select(-moe) %>% spread(variable, estimate)
king_county %>% select(-moe) %>% group_by(GEOID) %>% spread(variable, estimate)
# census_api_key("PUT YOUR KEY HERE", install=TRUE)
king_county <- get_acs(geography="tract", state="WA", county="King",
geometry = TRUE,
variables=c("B02001_001E", "B02009_001E")) %>%
select(-moe) %>% %>% group_by(GEOID) %>% spread(variable, estimate) %>%
rename(`Total Population`=B02001_001, `Any Black`=B02009_001) %>%
mutate(`Any Black`=`Any Black`/`Total Population`)
get_acs(geography="tract", state="WA", county="King",
geometry = TRUE,
variables=c("B02001_001E", "B02009_001E")) %>%
select(-moe) %>% %>% group_by(GEOID) %>% spread(variable, estimate)
# census_api_key("PUT YOUR KEY HERE", install=TRUE)
king_county <- get_acs(geography="tract", state="WA", county="King",
geometry = TRUE,
variables=c("B02001_001E", "B02009_001E")) %>%
select(-moe) %>% group_by(GEOID) %>% spread(variable, estimate) %>%
rename(`Total Population`=B02001_001, `Any Black`=B02009_001) %>%
mutate(`Any Black`=`Any Black`/`Total Population`)
king_county %>% ggplot(aes(fill=`Any Black`)) + geom_sf() +
coord_sf(crs = "+proj=longlat +datum=WGS84", datum=NA) +
scale_fill_continuous(name="Any Black\n", low="#d4d5f9", high="#00025b", limits=c(0,1)) +
theme_minimal() + ggtitle("Proportion Any Black")
king_county %>% ggplot(aes(fill=`Any Black`)) + geom_sf() +
coord_sf(crs = "+proj=longlat +datum=WGS84", datum=NA) +
scale_fill_continuous(name="Any Black\n", low="#d4d5f9", high="#00025b") +
theme_minimal() + ggtitle("Proportion Any Black")
?tidycensus
king_county <- get_acs(geography="tract", state="WA", county="King",
geometry = TRUE,
variables=c("B02001_001E", "B02009_001E")) %>%
select(-moe) %>% group_by(GEOID) %>% spread(variable, estimate) %>%
rename(`Total Population`=B02001_001, `Any Black`=B02009_001) %>%
mutate(`Any Black`=`Any Black`/`Total Population`)
head(king_county)
king_county %>% ggplot(aes(fill=`Any Black`)) + geom_sf() +
coord_sf(crs = "+proj=longlat +datum=WGS84", datum=NA) +
scale_fill_continuous(name="Any Black\n", low="#d4d5f9", high="#00025b") +
theme_minimal() + ggtitle("Proportion Any Black")
king_county <- get_acs(geography="tract", state="WA", county="King",
geometry = TRUE,
variables=c("B02001_001E", "B02009_001E")) %>%
select(-moe) %>% group_by(GEOID) %>% spread(variable, estimate) %>%
rename(`Total Population`=B02001_001, `Any Black`=B02009_001) %>%
mutate(`Any Black`=`Any Black`/`Total Population`)
head(king_county)
library(ggplot2)
?coord_sf
??sf
library(tidyverse)
library(broom)
data(swiss)
library(MASS, pos=999)
library(pander)
library(gapminder)
#-----------------------------------------------------------------------------------
lm_1 <- lm(lifeExp~year+log(gdpPercap), data=gapminder)
lm_1_tidy <- tidy(lm_1, conf.int = T)
lm_1_aug <- augment(lm_1)
head(lm_1_aug)
ggplot(lm_1_tidy %>% filter(term!="(Intercept)"), aes(estimate, term, color = term)) +
geom_point() + geom_vline(xintercept=0) +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high)) + theme_classic()
ggplot(lm_1_aug %>% arrange(.fitted), aes(x=Education, y=.fitted)) + geom_point()
swiss <- swiss %>% mutate(High_Fertility=as.numeric(Fertility>70))
glm1 <- glm(High_Fertility~Catholic+Education, data=swiss, family=binomial(link="logit"))
glm1_tidy <- tidy(glm1, conf.int = T, exponentiate = T)
head(augment(glm1, type.predict="response"))
ggplot(glm1_tidy %>% filter(term!="(Intercept)"), aes(estimate, term, color = term)) +
geom_point() +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high))
boot_lm <- swiss %>% bootstrap(100) %>%
do(augment(lm(Fertility~Catholic+Education, data=.)))
allboot <- boot_lm %>% group_by(Education) %>%
summarize(conf.low = quantile(.fitted, .05 / 2),
conf.high = quantile(.fitted, 1 - .05 / 2),
median = median(.fitted))
ggplot(allboot, aes(Education, median)) +
geom_line() +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), lty = 2, alpha = .1)
ggplot(boot_lm, aes(Education, Fertility)) + geom_point() +
geom_line(aes(y=.fitted, group=replicate), alpha=.2)
# TO DO ON CF_MAKE_DATA
## Keep original dataframe, use cf. prefix on cf_data
cf_make_data <- function(model, n=100, seq.vars=NULL,  or.vars=NULL, or.vals=NULL,
exact.var=NULL, exact.vals=NULL, as.list=TRUE, predict=T){
if (all(class(model)!="lm")){
stop("model must be a glm or lm object")
}
if (!is.null(exact.vals) & length(exact.vals) != n){
stop("exact.vals must be the same length as n")
}
initial_frame <- model.frame(model$terms, data=model$model)
cf_data <- data.frame(lapply(initial_frame, function(x) rep(mean(x), length.out=n)))
if(is.character(seq.vars)){
cf_data[seq.vars] <- data.frame(lapply(initial_frame[seq.vars], function(x) seq(min(x), max(x), length.out=n)))
}
if(is.character(or.vars)){
cf_data[or.vars] <- data.frame(lapply(initial_frame[or.vars], function(x) seq(or.vals[1], or.vals[2], length.out=n)))
}
if(is.character(exact.var)){
cf_data[exact.var] <- exact.vals
}
if(as.list){
return(list(cf_data=cf_data, model=model))
} else {
return(cf_data)
}
}
cf_predict <- function(data, model, interval="confidence", level=0.95){
if (is.list(data) & !is.data.frame(data)){
cf_data <- data$cf_data
model <- data$model
} else {
cf_data <- data
model <- model
}
if (any(class(model) %in% "glm")){
predictions <- predict(model, newdata = cf_data, se.fit=T, type="link")
predict_output <- data.frame(fit=model$family$linkinv(predictions$fit),
upr=model$family$linkinv(predictions$fit + qnorm(mean(c(level,1)))*predictions$se.fit),
lwr=model$family$linkinv(predictions$fit - qnorm(mean(c(level,1)))*predictions$se.fit))
names(predict_output) <- paste0("cf.", names(predict_output))
} else {
predict_output <- data.frame(predict(model, newdata = cf_data, se.fit=T, level=level, interval=interval)$fit)
names(predict_output) <- paste0("cf.", names(predict_output))
}
return(data.frame(cf_data, predict_output))
}
lm_1_cf_data <- cf_make_data(lm_1, or.vars="Education",  or.vals=c(40,60), exact.var="Catholic", exact.vals=seq(0,100,length.out=2), n=2)
lm(Fertility~Education+Catholic, data=swiss) %>%
cf_make_data(seq.vars="Education", n=20) %>%
cf_predict() %>% ggplot(aes(Education, cf.fit)) + geom_line() + geom_ribbon(aes(ymin=cf.lwr, ymax=cf.upr), color="steelblue2", alpha=0.5) + geom_point(data=swiss, aes(y=Fertility, x=Education))
glm(Fertility~Education+Catholic, data=swiss) %>%
cf_make_data(seq.vars="Education", n=20) %>%
cf_predict() %>% ggplot(aes(Education, cf.fit)) + geom_line() + geom_ribbon(aes(ymin=cf.lwr, ymax=cf.upr), fill="steelblue2", alpha=0.5)
glm(Fertility~Education+Catholic, data=swiss) %>%
cf_make_data(seq.vars="Education", n=20) %>%
cf_predict() %>% ggplot(aes(Education, cf.fit)) + geom_line() + geom_ribbon(aes(ymin=cf.lwr, ymax=cf.upr), fill="steelblue2", alpha=0.3)
library(tidyverse)
library(memisc)
library(stargazer)
library(pander)
?pander
data(swiss)
lm_1 <- lm(Fertility~Catholic+Education, data=swiss)
summary(lm1)
pander(lm_1)
?stat.table
??stat.table
# load the libraries
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(stringr)
# I set my working directory to where I've placed the data folder.
setwd("C:/Users/cclan/OneDrive/GitHub/CSSS508/ignore/open_data_year_one/")
# make my vector of filenames in the open_data_year_one folder
(files_in_year_one <- list.files("open_data_year_one"))
# remove the status data and README
(files_in_year_one <- files_in_year_one[-c(2, 5)])
data_list <- vector("list", length(files_in_year_one))
# I set my working directory to where I've placed the data folder.
setwd("C:/Users/cclan/OneDrive/GitHub/CSSS508/ignore/")
# make my vector of filenames in the open_data_year_one folder
(files_in_year_one <- list.files("open_data_year_one"))
files_in_year_one
list.files()
# I set my working directory to where I've placed the data folder.
setwd("C:/Users/cclan/OneDrive/GitHub/CSSS508/ignore/")
list.files()
getwd()
setwd("C:/Users/cclan/OneDrive/GitHub/CSSS508/ignore/")
getwd()
# make my vector of filenames in the open_data_year_one folder
(files_in_year_one <- list.files("open_data_year_one"))
list.files("open_data_year_one")
getwd()
list.files()
# load the libraries
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(stringr)
# I set my working directory to where I've placed the data folder.
setwd("C:/Users/cclan/OneDrive/GitHub/CSSS508/ignore/")
# make my vector of filenames in the open_data_year_one folder
(files_in_year_one <- list.files("open_data_year_one"))
# remove the status data and README
(files_in_year_one <- files_in_year_one[-c(2, 5)])
data_list <- vector("list", length(files_in_year_one))
(data_list_names <- substr(files_in_year_one,
start = 6,
stop = nchar(files_in_year_one) - 4))
names(data_list) <- data_list_names
data_list
# read in the data in the open_data_year_one folder
# paste0 to get the filepaths right
for(i in seq_along(files_in_year_one)) {
data_list[[i]] <- read_csv(paste0("open_data_year_one/", files_in_year_one[i]))
}
# load the libraries
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(stringr)
# The folder containing my data is in the same folder as this .Rmd.
# make my vector of filenames in the open_data_year_one folder
(files_in_year_one <- list.files("open_data_year_one"))
# remove the status data and README
(files_in_year_one <- files_in_year_one[-c(2, 5)])
# load the libraries
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(stringr)
# The folder containing my data is in the same folder as this .Rmd. The default
# working directory will thus contain the data folder.
# make my vector of filenames in the open_data_year_one folder
(files_in_year_one <- list.files("open_data_year_one"))
# remove the status data and README
(files_in_year_one <- files_in_year_one[-c(2, 5)])
data_list <- vector("list", length(files_in_year_one))
(data_list_names <- substr(files_in_year_one,
start = 6,
stop = nchar(files_in_year_one) - 4))
names(data_list) <- data_list_names
data_list
# read in the data in the open_data_year_one folder
# paste0 to get the filepaths right
for(i in seq_along(files_in_year_one)) {
data_list[[i]] <- read_csv(paste0("open_data_year_one/", files_in_year_one[i]))
}
str(data_list)
# make gender Unknown when user is a short term ride
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate(gender = ifelse(usertype == "Short-Term Pass Holder",
"Unknown", gender))
# station_data: make online a date
data_list[["station_data"]] <- data_list[["station_data"]] %>%
mutate(online=mdy(online))
# trip_data: starttime, stoptime should be date-time
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate_each(funs(mdy_hm), vars(starttime, stoptime))
?mutate_at
# trip_data: starttime, stoptime should be date-time
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate_at(funs(mdy_hm), starttime, stoptime)
# trip_data: starttime, stoptime should be date-time
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate_at(funs(mdy_hm), vars(starttime:stoptime))
# trip_data: starttime, stoptime should be date-time
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate_at(vars(starttime, stoptime), funs(mdy_hm))
# make the date-times valid:
# station_data: make online a date
data_list[["station_data"]] <- data_list[["station_data"]] %>%
mutate(online=mdy(online))
# trip_data: starttime, stoptime should be date-time
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate_at(vars(starttime, stoptime), funs(mdy_hm))
# weather_data: make Date a date
data_list[["weather_data"]] <- data_list[["weather_data"]] %>%
mutate(Date=mdy(Date))
# load the libraries
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(stringr)
# The folder containing my data is in the same folder as this .Rmd. The default
# working directory will thus contain the data folder.
# make my vector of filenames in the open_data_year_one folder
(files_in_year_one <- list.files("open_data_year_one"))
# remove the status data and README
(files_in_year_one <- files_in_year_one[-c(2, 5)])
data_list <- vector("list", length(files_in_year_one))
(data_list_names <- substr(files_in_year_one,
start = 6,
stop = nchar(files_in_year_one) - 4))
names(data_list) <- data_list_names
data_list
# read in the data in the open_data_year_one folder
# paste0 to get the filepaths right
for(i in seq_along(files_in_year_one)) {
data_list[[i]] <- read_csv(paste0("open_data_year_one/", files_in_year_one[i]))
}
# make gender Unknown when user is a short term ride
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate(gender = ifelse(usertype == "Short-Term Pass Holder",
"Unknown", gender))
# make the date-times valid:
# station_data: make online a date
data_list[["station_data"]] <- data_list[["station_data"]] %>%
mutate(online=mdy(online))
# trip_data: starttime, stoptime should be date-time
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate_at(vars(starttime, stoptime), funs(mdy_hm))
# weather_data: make Date a date
data_list[["weather_data"]] <- data_list[["weather_data"]] %>%
mutate(Date=mdy(Date))
# change variables with a few values to factors:
# trip_data: usertype, gender
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate_at(vars(usertype, gender), funs(factor))
# function to return the alpha part of a string before the hyphen
region_extract <- function(x) {
beg_letters <- "^[A-Z]*" # matches uppercase letters from beginning, as many times as needed, until runs into some other kind of character
return(str_extract(x, beg_letters))
}
# test it out:
region_extract(x = c("CBD-11", "ID-01"))
# station_data: get region from terminal
data_list[["station_data"]] <- data_list[["station_data"]] %>%
mutate(terminal_region = region_extract(terminal))
# trip_data: get region from to_station_id and from_station_id
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate(to_station_region = region_extract(to_station_id),
from_station_region = region_extract(from_station_id))
# if we see "Rain" in Events on weather_data, flag it
data_list[["weather_data"]] <- data_list[["weather_data"]] %>%
mutate(Rain = ifelse(str_detect(Events, "Rain"),
"Rain",
"No rain")) %>%
# a lot of days had no events recorded -- say "No rain" on these
mutate(Rain = ifelse(is.na(Rain),
"No rain",
Rain)) %>%
# make it a factor
mutate(Rain = factor(Rain))
trips_weather <- data_list[["trip_data"]] %>%
# make a column for just the date, in "Date" format
mutate(Date = as.Date(starttime)) %>%
# merge onto weather data, with just the Date and Rain columns
left_join(data_list[["weather_data"]] %>%
# use as.Date to make sure it ends up in "Date" format
mutate(Date = as.Date(Date)),
by = "Date")
daily_rain_rides <- function(region_code, direction) {
# filter data conditionally on direction and region_code
if(direction == "to") {
temp_1 <- trips_weather %>%
filter(to_station_region == region_code)
}
if(direction == "from") {
temp_1 <- trips_weather %>%
filter(from_station_region == region_code)
}
# summarize trips per day in that direction
temp_df <- temp_1 %>%
group_by(Date, Rain) %>%
tally()
# plot, colored by weather
ggplot(data = temp_df,
aes(x = Date,
y = n,
color = Rain,
group = Rain)) +
geom_point() +
geom_smooth() +
scale_x_date(name = "Date") +
ylab("Number of rides") +
scale_color_manual(name = "Weather",
values = c("black", "deepskyblue")) +
ggtitle(paste0("Daily rides going ", direction,
" ", region_code)) +
theme_minimal()
}
daily_rain_rides("SLU", "from")
daily_rain_rides("CH", "to")
daily_rain_rides("UW", "to")
(data_list_names <- str_sub(files_in_year_one,
start = 6,
stop = - 4))
(data_list_names <- str_sub(files_in_year_one, 6, -4))
(data_list_names <- str_sub(files_in_year_one, 6, -5))
# load the libraries
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(stringr)
# The folder containing my data is in the same folder as this .Rmd. The default
# working directory will thus contain the data folder.
# make my vector of filenames in the open_data_year_one folder
(files_in_year_one <- list.files("open_data_year_one"))
# remove the status data and README
(files_in_year_one <- files_in_year_one[-c(2, 5)])
data_list <- vector("list", length(files_in_year_one))
(data_list_names <- str_sub(files_in_year_one, 6, -5))
names(data_list) <- data_list_names
data_list
# read in the data in the open_data_year_one folder
# paste0 to get the filepaths right
for(i in seq_along(files_in_year_one)) {
data_list[[i]] <- read_csv(paste0("open_data_year_one/", files_in_year_one[i]))
}
# make gender Unknown when user is a short term ride
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate(gender = ifelse(usertype == "Short-Term Pass Holder",
"Unknown", gender))
# make the date-times valid:
# station_data: make online a date
data_list[["station_data"]] <- data_list[["station_data"]] %>%
mutate(online=mdy(online))
# trip_data: starttime, stoptime should be date-time
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate_at(vars(starttime, stoptime), funs(mdy_hm))
# weather_data: make Date a date
data_list[["weather_data"]] <- data_list[["weather_data"]] %>%
mutate(Date=mdy(Date))
# change variables with a few values to factors:
# trip_data: usertype, gender
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate_at(vars(usertype, gender), funs(factor))
# function to return the alpha part of a string before the hyphen
region_extract <- function(x) {
beg_letters <- "^[A-Z]*" # matches uppercase letters from beginning, as many times as needed, until runs into some other kind of character
return(str_extract(x, beg_letters))
}
# test it out:
region_extract(x = c("CBD-11", "ID-01"))
# station_data: get region from terminal
data_list[["station_data"]] <- data_list[["station_data"]] %>%
mutate(terminal_region = region_extract(terminal))
# trip_data: get region from to_station_id and from_station_id
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate(to_station_region = region_extract(to_station_id),
from_station_region = region_extract(from_station_id))
# if we see "Rain" in Events on weather_data, flag it
data_list[["weather_data"]] <- data_list[["weather_data"]] %>%
mutate(Rain = ifelse(str_detect(Events, "Rain"),
"Rain",
"No rain")) %>%
# a lot of days had no events recorded -- say "No rain" on these
mutate(Rain = ifelse(is.na(Rain),
"No rain",
Rain)) %>%
# make it a factor
mutate(Rain = factor(Rain))
trips_weather <- data_list[["trip_data"]] %>%
# make a column for just the date, in "Date" format
mutate(Date = as.Date(starttime)) %>%
# merge onto weather data, with just the Date and Rain columns
left_join(data_list[["weather_data"]] %>%
# use as.Date to make sure it ends up in "Date" format
mutate(Date = as.Date(Date)),
by = "Date")
daily_rain_rides <- function(region_code, direction) {
# filter data conditionally on direction and region_code
if(direction == "to") {
temp_1 <- trips_weather %>%
filter(to_station_region == region_code)
}
if(direction == "from") {
temp_1 <- trips_weather %>%
filter(from_station_region == region_code)
}
# summarize trips per day in that direction
temp_df <- temp_1 %>%
group_by(Date, Rain) %>%
tally()
# plot, colored by weather
ggplot(data = temp_df,
aes(x = Date,
y = n,
color = Rain,
group = Rain)) +
geom_point() +
geom_smooth() +
scale_x_date(name = "Date") +
ylab("Number of rides") +
scale_color_manual(name = "Weather",
values = c("black", "deepskyblue")) +
ggtitle(paste0("Daily rides going ", direction,
" ", region_code)) +
theme_minimal()
}
daily_rain_rides("SLU", "from")
daily_rain_rides("CH", "to")
daily_rain_rides("UW", "to")
?tally()
summary
length(matrix(c(2,2,2,2)))
length(matrix(c(2,2,2,2), ncol=2))
matrix(c(2,2,2,2), ncol=2)
length(matrix(c(2,2,2,2), ncol=2))
length(matrix(c(2,2,2,2,2,2), ncol=2))
