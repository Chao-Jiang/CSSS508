}
cf_predict <- function(data, model, interval="confidence", level=0.95){
if (is.list(data) & !is.data.frame(data)){
cf_data <- data$cf_data
model <- data$model
} else {
cf_data <- data
model <- model
}
if (any(class(model) %in% "glm")){
predictions <- predict(model, newdata = cf_data, se.fit=T, type="link")
predict_output <- data.frame(fit=model$family$linkinv(predictions$fit),
upr=model$family$linkinv(predictions$fit + qnorm(mean(c(level,1)))*predictions$se.fit),
lwr=model$family$linkinv(predictions$fit - qnorm(mean(c(level,1)))*predictions$se.fit))
names(predict_output) <- paste0("cf.", names(predict_output))
} else {
predict_output <- data.frame(predict(model, newdata = cf_data, se.fit=T, level=level, interval=interval)$fit)
names(predict_output) <- paste0("cf.", names(predict_output))
}
return(data.frame(cf_data, predict_output))
}
lm(Fertility~Education+Catholic, data=swiss) %>%
cf_make_data(seq.vars="Education", n=20) %>%
cf_predict() %>% ggplot(aes(Education, cf.fit)) + geom_line() + geom_ribbon(aes(ymin=cf.lwr, ymax=cf.upr), alpha=0.5) + geom_point(data=swiss, aes(y=Fertility, x=Education))
glm(Fertility~Education+Catholic, data=swiss) %>%
cf_make_data(seq.vars="Education", n=20) %>%
cf_predict() %>% ggplot(aes(Education, cf.fit)) + geom_line() + geom_ribbon(aes(ymin=cf.lwr, ymax=cf.upr), alpha=0.5)
lm(Fertility~Education+Catholic, data=swiss) %>%
cf_make_data(seq.vars="Education", n=20)
lm(Fertility~Education+Catholic, data=swiss) %>%
cf_make_data(seq.vars="Education", n=20) %>%
cf_predict()
?cut
swiss3 <- swiss %>% mutate(Fertility3=cut(Fertility,3))
?glm
?rpois
swiss3 <- swiss %>% mutate(Fertility3=rpois(1,cut(Fertility,3)))
swiss3 <- swiss %>% mutate(Fertility3=rpois(n(),cut(Fertility,3)))
swiss3 <- swiss %>% mutate(Fertility3=rpois(nrow(.),cut(Fertility,3)))
glm(Examination~Education+Catholic, data=swiss, family=poisson()) %>%
cf_make_data(seq.vars="Education", n=20) %>%
cf_predict() %>% ggplot(aes(Education, cf.fit)) + geom_line() + geom_ribbon(aes(ymin=cf.lwr, ymax=cf.upr), alpha=0.5)
glm( (Examination > 5)~Education+Catholic, data=swiss, family=binomial(link="logit")) %>%
cf_make_data(seq.vars="Education", n=20) %>%
cf_predict() %>% ggplot(aes(Education, cf.fit)) + geom_line() + geom_ribbon(aes(ymin=cf.lwr, ymax=cf.upr), alpha=0.5)
lm_1 <- lm(Fertility~Catholic+Education, data=swiss)
lm_1_tidy <- tidy(lm_1, conf.int = T)
lm_1_tidy
library(pander)
?pander
?pander.table
lm_!
lm_1
lm_1$model
class(lm_1$model)
?Rep
?rep
lm_1$model %>% data.frame(lapply(function (x) rep(mean(x), length.out=n)))
lm_1$model %>% data.frame(lapply(., function (x) rep(mean(x), length.out=n)))
data.frame(lapply(lm_1$model, function(x) rep(mean(x), length.out=n)))
data.frame(lapply(lm_1$model, function(x) rep(mean(x), length.out=20)))
cf_df <- function(data,n){
cf_data <- model$model %>% data.frame(lapply(., function(x) rep(mean(x), length.out=n)))
}
cf_df(lm_1, 20)
cf_df <- function(model,n){
cf_data <- model$model %>% data.frame(lapply(., function(x) rep(mean(x), length.out=n)))
}
cf_df(lm_1, 20)
cf_df <- function(model,n){
cf_data <- model$model %>% data.frame(lapply(., function(x) rep(mean(x), length.out=n)))
}
cf_df <- function(model,n){
cf_data <- model$model %>% data.frame(lapply(., function(x) rep(mean(x), length.out=n)))
}
cf_df(lm_1, 20)
lm_1$model %>% data.frame(lapply(., function(x) rep(mean(x), length.out=20)))
cf_df <- function(model,n){
cf_data <- data.frame(model$model %>% lapply(., function(x) rep(mean(x), length.out=n)))
}
cf_df(lm_1, 20)
cf_df <- function(model,n){
cf_data <- data.frame(model$model %>% lapply(., function(x) rep(mean(x), length.out=n)))
return(cf_data)
}
cf_df(lm_1, 20)
lm_1$model %>% data.frame(lapply(., function(x) rep(mean(x), length.out=20))) %>% mutate(Education=seq(min(Education),max(Education),length.out=nrow(.)))
lm_1$model %>% lapply(., function(x) rep(mean(x), length.out=20)) %>% data_frame() %>% mutate(Education=seq(min(Education),max(Education),length.out=nrow(.)))
lm_1$model %>% lapply(., function(x) rep(mean(x), length.out=20)) %>% data_frame()
lm_1$model %>% lapply(., function(x) rep(mean(x), length.out=20)) %>% as.data.frame() %>% mutate(Education=seq(min(Education),max(Education),length.out=nrow(.)))
with(swiss, Education)
cf_replace <- function(cf_data, data, rep.var, rep.val){
cf_data[["rep.var"]] <- with(data, rep.val)
}
cf_df(lm_1, 20)
cf_df <- function(model,n){
cf_data <- data.frame(model$model %>% lapply(., function(x) rep(mean(x), length.out=n)))
return(list(cf_data=cf_data, model=model))
}
cf_df(lm_1, 20)
cf_replace <- function(cf_list, rep.var, rep.val){
cf_list$cf_data[["rep.var"]] <- with(cf_list$model$model, rep.val)
}
cf_replace <- function(cf_list, rep.var, rep.val){
cf_list$cf_data[["rep.var"]] <- with(cf_list$model$model, rep.val)
return(cf_list)
}
cf_df(lm_1, 20) %>% cf_replace(swiss, seq(min(Education), max(Education), length.out=length(swiss)))
cf_df(lm_1, 20) %>% cf_replace("Education", seq(min(Education), max(Education), length.out=length(swiss)))
cf_df(lm_1, 20) %>% cf_replace("Education", rep_val=seq(min(Education), max(Education), length.out=length(swiss)))
cf_replace <- function(cf_list, rep.var, rep.val){
cf_list$cf_data[["rep.var"]] <- rep.val
return(cf_list)
}
cf_df(lm_1, 20) %>% cf_replace("Education", rep_val=seq(0,100, length.out=length(swiss)))
cf_df(lm_1, 20) %>% cf_replace("Education", rep.val=seq(0,100, length.out=length(swiss)))
cf_df(lm_1, 20) %>% cf_replace("Education", rep.val=seq(0,100, length.out=20))
cf_replace <- function(cf_list, rep.var, rep.val){
cf_list$cf_data[[rep.var]] <- rep.val
return(cf_list)
}
cf_df(lm_1, 20) %>% cf_replace("Education", rep.val=seq(0,100, length.out=20))
cf_df(lm_1, 20) %>% cf_replace("Education", rep.val=seq(0,100, length.out=20)) %>% cf_predict()
lm_1 <- lm(Fertility~Education+Catholic, data=swiss)
cf_data <- lm_1$model %>% lapply(., function(x) rep(mean(x), length.out=n)) %>% data.frame()
cf_data
lm_1 <- lm(Fertility~Education+Catholic, data=swiss)
cf_data <- lm_1$model %>% lapply(., function(x) rep(mean(x), length.out=20)) %>% data.frame()
cf_data
lm_1 <- lm(Fertility~Education+Catholic, data=swiss)
cf_data <- lm_1$model %>% lapply(., function(x) rep(mean(x), length.out=20)) %>% data.frame()
cf_data[["Education"]] <- seq(0,100, length.out=20))
cf_data[["Education"]] <- seq(0,100, length.out=20)
predict(lm_1, newdata=cf_data, interval="confidence")
cf_df <- function(model,n){
cf_data <- data.frame(model$model %>% lapply(., function(x) rep(mean(x), length.out=n)))
return(list(cf_data=cf_data, model=model))
}
cf_replace <- function(cf_list, rep.var, rep.val){
cf_list$cf_data[[rep.var]] <- rep.val
return(cf_list)
}
cf_df(lm_1, 20) %>% cf_replace("Education", rep.val=seq(0,100, length.out=20)) %>% cf_predict()
predict(lm_1, newdata=cf_data, interval="confidence")
lm_1 <- lm(Fertility~Education+Catholic, data=swiss)
cf_data <- lm_1$model %>% lapply(., function(x) rep(mean(x), length.out=20)) %>% data.frame()
cf_data[["Education"]] <- seq(0, 100, length.out=20)
lm_1_predicted <- predict(lm_1, newdata=cf_data, interval="confidence")
cbind(cf_data, lm_1_predicted)
cf_predict <- function(data, model, interval="confidence", level=0.95){
if (is.list(data) & !is.data.frame(data)){
cf_data <- data$cf_data; model <- data$model
} else { cf_data <- data; model <- model }
if (any(class(model) %in% "glm")){
predictions <- predict(model, newdata = cf_data, se.fit=T, type="link")
predict_output <- data.frame(fit=model$family$linkinv(predictions$fit),
upr=model$family$linkinv(predictions$fit + qnorm(mean(c(level,1)))*predictions$se.fit),
lwr=model$family$linkinv(predictions$fit - qnorm(mean(c(level,1)))*predictions$se.fit))
names(predict_output) <- paste0("cf.", names(predict_output))
} else {
predict_output <- data.frame(predict(model, newdata = cf_data, se.fit=T, level=level, interval=interval)$fit)
names(predict_output) <- paste0("cf.", names(predict_output))
}
return(data.frame(cf_data, predict_output))
}
cf_df(lm_1, 20) %>% cf_replace("Education", rep.val=seq(0,100, length.out=20)) %>% cf_predict()
cf_df(lm_1, 20) %>% cf_replace("Education", rep.val=seq(0,100, length.out=20)) %>% predict(.$model, newdata = .$cf_data, se.fit=T, type="link")
cf_df(lm_1, 20) %>% cf_replace("Education", rep.val=seq(0,100, length.out=20))
?predict
cf_df(lm_1, 20) %>% cf_replace("Education", rep.val=seq(0,100, length.out=20)) %>% predict(.[["model"]], newdata = .[["cf_data"]], se.fit=T, type="link")
cf_df(lm_1, 20) %>% cf_replace("Education", rep.val=seq(0,100, length.out=20))
cf_df(lm_1, 20) %>% cf_replace("Education", rep.val=seq(0,100, length.out=20))$model
test <- cf_df(lm_1, 20) %>% cf_replace("Education", rep.val=seq(0,100, length.out=20))
test
test$model
class(test$model)
cf_df(lm_1, 20) %>% cf_replace("Education", rep.val=seq(0,100, length.out=20)) %>% predict(.[[2]], newdata = .[[1]], se.fit=T, type="link")
predict(test$model, test$cf_data)
(cf_df(lm_1, 20) %>% cf_replace("Education", rep.val=seq(0,100, length.out=20)))$model
predict((cf_df(lm_1, 20) %>% cf_replace("Education", rep.val=seq(0,100, length.out=20)))$model, (cf_df(lm_1, 20) %>% cf_replace("Education", rep.val=seq(0,100, length.out=20)))$cf_data )
cf_df(lm_1, 20) %>% cf_replace("Education", rep.val=seq(0,100, length.out=20)) %>% predict(.$model, newdata = .$cf_data, se.fit=T, type="link")
cf_df(lm_1, 20) %>% cf_replace("Education", rep.val=seq(0,100, length.out=20)) %>% .$model
cf_df(lm_1, 20) %>% cf_replace("Education", rep.val=seq(0,100, length.out=20)) %>% .$model
cf_df(lm_1, 20) %>% cf_replace("Education", rep.val=seq(0,100, length.out=20)) %>% predict(.$model, newdata = .$cf_data, se.fit=T)
test <- cf_df(lm_1, 20) %>% cf_replace("Education", rep.val=seq(0,100, length.out=20))
predict(test$model, test$cf_data, se.fit=T)
data.frame(predict(test$model, test$cf_data, se.fit=T))
cf_df(lm_1, 20) %>% cf_replace("Education", rep.val=seq(0,100, length.out=20))
cf_df(lm_1, 20) %>% cf_replace("Education", rep.val=seq(0,100, length.out=20)) %>% cf_predict()
lm_1 <- lm(Fertility~Catholic+Education, data=swiss)
lm_1_tidy <- tidy(lm_1, conf.int = T)
lm_1_aug <- augment(lm1)
head(lm_1_aug)
lm_1 <- lm(Fertility~Catholic+Education, data=swiss)
lm_1_tidy <- tidy(lm_1, conf.int = T)
lm_1_aug <- augment(lm_1)
head(lm_1_aug)
ggplot(lm_1_aug %>% arrange(.fitted), aes(x=Fertility, y=.fitted, group=.rownames)) + geom_point() +
geom_line()
ggplot(lm_1_aug %>% arrange(.fitted), aes(x=Education, y=Fertility)) + geom_point() +
geom_line(aes(x=Education, y=.fitted))
ggplot(lm_1_aug %>% arrange(.fitted), aes(x=Education, y=Fertility)) + geom_point() +
geom_point(aes(x=Education, y=.fitted))
ggplot(lm_1_aug %>% arrange(.fitted), aes(x=Education, y=Fertility)) + geom_point() +
geom_point(aes(x=Education, y=.fitted), color="red")
ggplot(lm_1_aug %>% arrange(.fitted), aes(x=Education, y=.fitted)) + geom_point()
ggplot(lm1_tidy %>% filter(term!="(Intercept)"), aes(estimate, term, color = term)) +
geom_point() +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high))
ggplot(lm_1_tidy %>% filter(term!="(Intercept)"), aes(estimate, term, color = term)) +
geom_point() +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high))
?geom_vline
ggplot(lm_1_tidy %>% filter(term!="(Intercept)"), aes(estimate, term, color = term)) +
geom_point() + vline(xintercept=0) +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high))
ggplot(lm_1_tidy %>% filter(term!="(Intercept)"), aes(estimate, term, color = term)) +
geom_point() + geom_vline(xintercept=0) +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high))
ggplot(lm_1_tidy %>% filter(term!="(Intercept)"), aes(estimate, term, color = term)) +
geom_point() + geom_vline(xintercept=0) +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high)) + theme_classic
ggplot(lm_1_tidy %>% filter(term!="(Intercept)"), aes(estimate, term, color = term)) +
geom_point() + geom_vline(xintercept=0) +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high)) + theme_classic()
ggplot(lm_1_aug %>% arrange(.fitted), aes(x=Education, y=.fitted)) + geom_point()
swiss <- swiss %>% mutate(High_Fertility=as.numeric(Fertility>70))
glm1 <- glm(High_Fertility~Catholic+Education, data=swiss, family=binomial(link="logit"))
glm1_tidy <- tidy(glm1, conf.int = T, exponentiate = T)
head(augment(glm1, type.predict="response"))
ggplot(glm1_tidy %>% filter(term!="(Intercept)"), aes(estimate, term, color = term)) +
geom_point() +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high))
boot_lm <- swiss %>% bootstrap(100) %>%
do(augment(lm(Fertility~Catholic+Education, data=.)))
allboot <- boot_lm %>% group_by(Education) %>%
summarize(conf.low = quantile(.fitted, .05 / 2),
conf.high = quantile(.fitted, 1 - .05 / 2),
median = median(.fitted))
ggplot(allboot, aes(Education, median)) +
geom_line() +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), lty = 2, alpha = .1)
ggplot(boot_lm, aes(Education, Fertility)) + geom_point() +
geom_line(aes(y=.fitted, group=replicate), alpha=.2)
library(gapminder)
data(gapminder)
head(gapminder)
lm_1 <- lm(lifeExp+pop+gdpPercap, data=gapminder)
lm_1 <- lm(lifeExp~pop+gdpPercap, data=gapminder)
lm_1_tidy <- tidy(lm_1, conf.int = T)
lm_1_aug <- augment(lm_1)
head(lm_1_aug)
ggplot(lm_1_tidy %>% filter(term!="(Intercept)"), aes(estimate, term, color = term)) +
geom_point() + geom_vline(xintercept=0) +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high)) + theme_classic()
lm_1 <- lm(lifeExp~log(pop)+log(gdpPercap), data=gapminder)
lm_1_tidy <- tidy(lm_1, conf.int = T)
lm_1_aug <- augment(lm_1)
head(lm_1_aug)
ggplot(lm_1_tidy %>% filter(term!="(Intercept)"), aes(estimate, term, color = term)) +
geom_point() + geom_vline(xintercept=0) +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high)) + theme_classic()
lm_1 <- lm(lifeExp~year+log(gdpPercap), data=gapminder)
lm_1_tidy <- tidy(lm_1, conf.int = T)
lm_1_aug <- augment(lm_1)
head(lm_1_aug)
ggplot(lm_1_tidy %>% filter(term!="(Intercept)"), aes(estimate, term, color = term)) +
geom_point() + geom_vline(xintercept=0) +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high)) + theme_classic()
library(tidycensus)
?get_acs
# census_api_key("PUT YOUR KEY HERE", install=TRUE)
king_county <- get_acs(geography="tract", state="WA", county="King", geometry = TRUE, variables=c("B02001_001E","B02001_002E", "B02001_003E", "B02009_001E"), cb=FALSE)
king_county %>% ggplot(aes(fill=`Any Black`)) + geom_sf() +
coord_sf(crs = "+proj=longlat +datum=WGS84", datum=NA) +
scale_fill_continuous(name="Any Black\n", low="#d4d5f9", high="#00025b", limits=c(0,1)) +
theme_minimal() + ggtitle("Proportion Any Black")
library(tidyverse)
king_county %>% ggplot(aes(fill=`Any Black`)) + geom_sf() +
coord_sf(crs = "+proj=longlat +datum=WGS84", datum=NA) +
scale_fill_continuous(name="Any Black\n", low="#d4d5f9", high="#00025b", limits=c(0,1)) +
theme_minimal() + ggtitle("Proportion Any Black")
?get_acs
# census_api_key("PUT YOUR KEY HERE", install=TRUE)
king_county <- get_acs(geography="tract", state="WA", county="King",
geometry = TRUE,
variables=c("B02001_001E", "B02009_001E")) %>%
spread(variable, estimate) %>%
rename(`Total Population`=B02001_001, `Any Black`=B02009_001) %>%
mutate(`Any Black`=`Any Black`/`Total Population`)
?spread
king_county <- get_acs(geography="tract", state="WA", county="King",
geometry = TRUE,
variables=c("B02001_001E", "B02009_001E"))
king_county %>% spread(variable, estimate)
king_county %>% group_by(GEOID) %>% spread(variable, estimate)
# census_api_key("PUT YOUR KEY HERE", install=TRUE)
king_county <- get_acs(geography="tract", state="WA", county="King",
geometry = TRUE,
variables=c("B02001_001E", "B02009_001E")) %>%
select(-moe) %>% spread(variable, estimate) %>%
rename(`Total Population`=B02001_001, `Any Black`=B02009_001) %>%
mutate(`Any Black`=`Any Black`/`Total Population`)
get_acs(geography="tract", state="WA", county="King",
geometry = TRUE,
variables=c("B02001_001E", "B02009_001E")) %>%
select(-moe) %>% spread(variable, estimate)
king_county %>% select(-moe)
king_county %>% select(-moe) %>% spread(variable, estimate)
king_county %>% select(-moe) %>% group_by(GEOID) %>% spread(variable, estimate)
# census_api_key("PUT YOUR KEY HERE", install=TRUE)
king_county <- get_acs(geography="tract", state="WA", county="King",
geometry = TRUE,
variables=c("B02001_001E", "B02009_001E")) %>%
select(-moe) %>% %>% group_by(GEOID) %>% spread(variable, estimate) %>%
rename(`Total Population`=B02001_001, `Any Black`=B02009_001) %>%
mutate(`Any Black`=`Any Black`/`Total Population`)
get_acs(geography="tract", state="WA", county="King",
geometry = TRUE,
variables=c("B02001_001E", "B02009_001E")) %>%
select(-moe) %>% %>% group_by(GEOID) %>% spread(variable, estimate)
# census_api_key("PUT YOUR KEY HERE", install=TRUE)
king_county <- get_acs(geography="tract", state="WA", county="King",
geometry = TRUE,
variables=c("B02001_001E", "B02009_001E")) %>%
select(-moe) %>% group_by(GEOID) %>% spread(variable, estimate) %>%
rename(`Total Population`=B02001_001, `Any Black`=B02009_001) %>%
mutate(`Any Black`=`Any Black`/`Total Population`)
king_county %>% ggplot(aes(fill=`Any Black`)) + geom_sf() +
coord_sf(crs = "+proj=longlat +datum=WGS84", datum=NA) +
scale_fill_continuous(name="Any Black\n", low="#d4d5f9", high="#00025b", limits=c(0,1)) +
theme_minimal() + ggtitle("Proportion Any Black")
king_county %>% ggplot(aes(fill=`Any Black`)) + geom_sf() +
coord_sf(crs = "+proj=longlat +datum=WGS84", datum=NA) +
scale_fill_continuous(name="Any Black\n", low="#d4d5f9", high="#00025b") +
theme_minimal() + ggtitle("Proportion Any Black")
?tidycensus
king_county <- get_acs(geography="tract", state="WA", county="King",
geometry = TRUE,
variables=c("B02001_001E", "B02009_001E")) %>%
select(-moe) %>% group_by(GEOID) %>% spread(variable, estimate) %>%
rename(`Total Population`=B02001_001, `Any Black`=B02009_001) %>%
mutate(`Any Black`=`Any Black`/`Total Population`)
head(king_county)
king_county %>% ggplot(aes(fill=`Any Black`)) + geom_sf() +
coord_sf(crs = "+proj=longlat +datum=WGS84", datum=NA) +
scale_fill_continuous(name="Any Black\n", low="#d4d5f9", high="#00025b") +
theme_minimal() + ggtitle("Proportion Any Black")
king_county <- get_acs(geography="tract", state="WA", county="King",
geometry = TRUE,
variables=c("B02001_001E", "B02009_001E")) %>%
select(-moe) %>% group_by(GEOID) %>% spread(variable, estimate) %>%
rename(`Total Population`=B02001_001, `Any Black`=B02009_001) %>%
mutate(`Any Black`=`Any Black`/`Total Population`)
head(king_county)
library(ggplot2)
?coord_sf
??sf
library(tidyverse)
library(broom)
data(swiss)
library(MASS, pos=999)
library(pander)
library(gapminder)
#-----------------------------------------------------------------------------------
lm_1 <- lm(lifeExp~year+log(gdpPercap), data=gapminder)
lm_1_tidy <- tidy(lm_1, conf.int = T)
lm_1_aug <- augment(lm_1)
head(lm_1_aug)
ggplot(lm_1_tidy %>% filter(term!="(Intercept)"), aes(estimate, term, color = term)) +
geom_point() + geom_vline(xintercept=0) +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high)) + theme_classic()
ggplot(lm_1_aug %>% arrange(.fitted), aes(x=Education, y=.fitted)) + geom_point()
swiss <- swiss %>% mutate(High_Fertility=as.numeric(Fertility>70))
glm1 <- glm(High_Fertility~Catholic+Education, data=swiss, family=binomial(link="logit"))
glm1_tidy <- tidy(glm1, conf.int = T, exponentiate = T)
head(augment(glm1, type.predict="response"))
ggplot(glm1_tidy %>% filter(term!="(Intercept)"), aes(estimate, term, color = term)) +
geom_point() +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high))
boot_lm <- swiss %>% bootstrap(100) %>%
do(augment(lm(Fertility~Catholic+Education, data=.)))
allboot <- boot_lm %>% group_by(Education) %>%
summarize(conf.low = quantile(.fitted, .05 / 2),
conf.high = quantile(.fitted, 1 - .05 / 2),
median = median(.fitted))
ggplot(allboot, aes(Education, median)) +
geom_line() +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), lty = 2, alpha = .1)
ggplot(boot_lm, aes(Education, Fertility)) + geom_point() +
geom_line(aes(y=.fitted, group=replicate), alpha=.2)
# TO DO ON CF_MAKE_DATA
## Keep original dataframe, use cf. prefix on cf_data
cf_make_data <- function(model, n=100, seq.vars=NULL,  or.vars=NULL, or.vals=NULL,
exact.var=NULL, exact.vals=NULL, as.list=TRUE, predict=T){
if (all(class(model)!="lm")){
stop("model must be a glm or lm object")
}
if (!is.null(exact.vals) & length(exact.vals) != n){
stop("exact.vals must be the same length as n")
}
initial_frame <- model.frame(model$terms, data=model$model)
cf_data <- data.frame(lapply(initial_frame, function(x) rep(mean(x), length.out=n)))
if(is.character(seq.vars)){
cf_data[seq.vars] <- data.frame(lapply(initial_frame[seq.vars], function(x) seq(min(x), max(x), length.out=n)))
}
if(is.character(or.vars)){
cf_data[or.vars] <- data.frame(lapply(initial_frame[or.vars], function(x) seq(or.vals[1], or.vals[2], length.out=n)))
}
if(is.character(exact.var)){
cf_data[exact.var] <- exact.vals
}
if(as.list){
return(list(cf_data=cf_data, model=model))
} else {
return(cf_data)
}
}
cf_predict <- function(data, model, interval="confidence", level=0.95){
if (is.list(data) & !is.data.frame(data)){
cf_data <- data$cf_data
model <- data$model
} else {
cf_data <- data
model <- model
}
if (any(class(model) %in% "glm")){
predictions <- predict(model, newdata = cf_data, se.fit=T, type="link")
predict_output <- data.frame(fit=model$family$linkinv(predictions$fit),
upr=model$family$linkinv(predictions$fit + qnorm(mean(c(level,1)))*predictions$se.fit),
lwr=model$family$linkinv(predictions$fit - qnorm(mean(c(level,1)))*predictions$se.fit))
names(predict_output) <- paste0("cf.", names(predict_output))
} else {
predict_output <- data.frame(predict(model, newdata = cf_data, se.fit=T, level=level, interval=interval)$fit)
names(predict_output) <- paste0("cf.", names(predict_output))
}
return(data.frame(cf_data, predict_output))
}
lm_1_cf_data <- cf_make_data(lm_1, or.vars="Education",  or.vals=c(40,60), exact.var="Catholic", exact.vals=seq(0,100,length.out=2), n=2)
lm(Fertility~Education+Catholic, data=swiss) %>%
cf_make_data(seq.vars="Education", n=20) %>%
cf_predict() %>% ggplot(aes(Education, cf.fit)) + geom_line() + geom_ribbon(aes(ymin=cf.lwr, ymax=cf.upr), color="steelblue2", alpha=0.5) + geom_point(data=swiss, aes(y=Fertility, x=Education))
glm(Fertility~Education+Catholic, data=swiss) %>%
cf_make_data(seq.vars="Education", n=20) %>%
cf_predict() %>% ggplot(aes(Education, cf.fit)) + geom_line() + geom_ribbon(aes(ymin=cf.lwr, ymax=cf.upr), fill="steelblue2", alpha=0.5)
glm(Fertility~Education+Catholic, data=swiss) %>%
cf_make_data(seq.vars="Education", n=20) %>%
cf_predict() %>% ggplot(aes(Education, cf.fit)) + geom_line() + geom_ribbon(aes(ymin=cf.lwr, ymax=cf.upr), fill="steelblue2", alpha=0.3)
library(tidyverse)
library(memisc)
library(stargazer)
library(pander)
?pander
data(swiss)
lm_1 <- lm(Fertility~Catholic+Education, data=swiss)
summary(lm1)
pander(lm_1)
?stat.table
??stat.table
# load the libraries
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(stringr)
# I set my working directory to where I've placed the data folder.
setwd("C:/Users/cclan/OneDrive/GitHub/CSSS508/ignore/open_data_year_one/")
# make my vector of filenames in the open_data_year_one folder
(files_in_year_one <- list.files("open_data_year_one"))
# remove the status data and README
(files_in_year_one <- files_in_year_one[-c(2, 5)])
data_list <- vector("list", length(files_in_year_one))
# I set my working directory to where I've placed the data folder.
setwd("C:/Users/cclan/OneDrive/GitHub/CSSS508/ignore/")
# make my vector of filenames in the open_data_year_one folder
(files_in_year_one <- list.files("open_data_year_one"))
files_in_year_one
list.files()
# I set my working directory to where I've placed the data folder.
setwd("C:/Users/cclan/OneDrive/GitHub/CSSS508/ignore/")
list.files()
getwd()
setwd("C:/Users/cclan/OneDrive/GitHub/CSSS508/ignore/")
getwd()
# make my vector of filenames in the open_data_year_one folder
(files_in_year_one <- list.files("open_data_year_one"))
list.files("open_data_year_one")
getwd()
list.files()
# load the libraries
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(stringr)
# I set my working directory to where I've placed the data folder.
setwd("C:/Users/cclan/OneDrive/GitHub/CSSS508/ignore/")
# make my vector of filenames in the open_data_year_one folder
(files_in_year_one <- list.files("open_data_year_one"))
# remove the status data and README
(files_in_year_one <- files_in_year_one[-c(2, 5)])
data_list <- vector("list", length(files_in_year_one))
(data_list_names <- substr(files_in_year_one,
start = 6,
stop = nchar(files_in_year_one) - 4))
names(data_list) <- data_list_names
data_list
# read in the data in the open_data_year_one folder
# paste0 to get the filepaths right
for(i in seq_along(files_in_year_one)) {
data_list[[i]] <- read_csv(paste0("open_data_year_one/", files_in_year_one[i]))
}
