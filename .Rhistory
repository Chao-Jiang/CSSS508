"No rain",
Rain)) %>%
# make it a factor
mutate(Rain = factor(Rain))
trips_weather <- data_list[["trip_data"]] %>%
# make a column for just the date, in "Date" format
mutate(Date = as.Date(starttime)) %>%
# merge onto weather data, with just the Date and Rain columns
left_join(data_list[["weather_data"]] %>%
# use as.Date to make sure it ends up in "Date" format
mutate(Date = as.Date(Date)),
by = "Date")
daily_rain_rides <- function(region_code, direction) {
# filter data conditionally on direction and region_code
if(direction == "to") {
temp_1 <- trips_weather %>%
filter(to_station_region == region_code)
}
if(direction == "from") {
temp_1 <- trips_weather %>%
filter(from_station_region == region_code)
}
# summarize trips per day in that direction
temp_df <- temp_1 %>%
group_by(Date, Rain) %>%
tally()
# plot, colored by weather
ggplot(data = temp_df,
aes(x = Date,
y = n,
color = Rain,
group = Rain)) +
geom_point() +
geom_smooth() +
scale_x_date(name = "Date") +
ylab("Number of rides") +
scale_color_manual(name = "Weather",
values = c("black", "deepskyblue")) +
ggtitle(paste0("Daily rides going ", direction,
" ", region_code)) +
theme_minimal()
}
daily_rain_rides("SLU", "from")
daily_rain_rides("CH", "to")
daily_rain_rides("UW", "to")
(data_list_names <- str_sub(files_in_year_one,
start = 6,
stop = - 4))
(data_list_names <- str_sub(files_in_year_one, 6, -4))
(data_list_names <- str_sub(files_in_year_one, 6, -5))
# load the libraries
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(stringr)
# The folder containing my data is in the same folder as this .Rmd. The default
# working directory will thus contain the data folder.
# make my vector of filenames in the open_data_year_one folder
(files_in_year_one <- list.files("open_data_year_one"))
# remove the status data and README
(files_in_year_one <- files_in_year_one[-c(2, 5)])
data_list <- vector("list", length(files_in_year_one))
(data_list_names <- str_sub(files_in_year_one, 6, -5))
names(data_list) <- data_list_names
data_list
# read in the data in the open_data_year_one folder
# paste0 to get the filepaths right
for(i in seq_along(files_in_year_one)) {
data_list[[i]] <- read_csv(paste0("open_data_year_one/", files_in_year_one[i]))
}
# make gender Unknown when user is a short term ride
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate(gender = ifelse(usertype == "Short-Term Pass Holder",
"Unknown", gender))
# make the date-times valid:
# station_data: make online a date
data_list[["station_data"]] <- data_list[["station_data"]] %>%
mutate(online=mdy(online))
# trip_data: starttime, stoptime should be date-time
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate_at(vars(starttime, stoptime), funs(mdy_hm))
# weather_data: make Date a date
data_list[["weather_data"]] <- data_list[["weather_data"]] %>%
mutate(Date=mdy(Date))
# change variables with a few values to factors:
# trip_data: usertype, gender
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate_at(vars(usertype, gender), funs(factor))
# function to return the alpha part of a string before the hyphen
region_extract <- function(x) {
beg_letters <- "^[A-Z]*" # matches uppercase letters from beginning, as many times as needed, until runs into some other kind of character
return(str_extract(x, beg_letters))
}
# test it out:
region_extract(x = c("CBD-11", "ID-01"))
# station_data: get region from terminal
data_list[["station_data"]] <- data_list[["station_data"]] %>%
mutate(terminal_region = region_extract(terminal))
# trip_data: get region from to_station_id and from_station_id
data_list[["trip_data"]] <- data_list[["trip_data"]] %>%
mutate(to_station_region = region_extract(to_station_id),
from_station_region = region_extract(from_station_id))
# if we see "Rain" in Events on weather_data, flag it
data_list[["weather_data"]] <- data_list[["weather_data"]] %>%
mutate(Rain = ifelse(str_detect(Events, "Rain"),
"Rain",
"No rain")) %>%
# a lot of days had no events recorded -- say "No rain" on these
mutate(Rain = ifelse(is.na(Rain),
"No rain",
Rain)) %>%
# make it a factor
mutate(Rain = factor(Rain))
trips_weather <- data_list[["trip_data"]] %>%
# make a column for just the date, in "Date" format
mutate(Date = as.Date(starttime)) %>%
# merge onto weather data, with just the Date and Rain columns
left_join(data_list[["weather_data"]] %>%
# use as.Date to make sure it ends up in "Date" format
mutate(Date = as.Date(Date)),
by = "Date")
daily_rain_rides <- function(region_code, direction) {
# filter data conditionally on direction and region_code
if(direction == "to") {
temp_1 <- trips_weather %>%
filter(to_station_region == region_code)
}
if(direction == "from") {
temp_1 <- trips_weather %>%
filter(from_station_region == region_code)
}
# summarize trips per day in that direction
temp_df <- temp_1 %>%
group_by(Date, Rain) %>%
tally()
# plot, colored by weather
ggplot(data = temp_df,
aes(x = Date,
y = n,
color = Rain,
group = Rain)) +
geom_point() +
geom_smooth() +
scale_x_date(name = "Date") +
ylab("Number of rides") +
scale_color_manual(name = "Weather",
values = c("black", "deepskyblue")) +
ggtitle(paste0("Daily rides going ", direction,
" ", region_code)) +
theme_minimal()
}
daily_rain_rides("SLU", "from")
daily_rain_rides("CH", "to")
daily_rain_rides("UW", "to")
?tally()
summary
length(matrix(c(2,2,2,2)))
length(matrix(c(2,2,2,2), ncol=2))
matrix(c(2,2,2,2), ncol=2)
length(matrix(c(2,2,2,2), ncol=2))
length(matrix(c(2,2,2,2,2,2), ncol=2))
day.time1=as.POSIXct(day,format="%d/%m/%Y T %H:%M:%S",tz="Europe/Paris")
day.time1
day.time1$year
day.time2=as.POSIXlt(day,format="%d/%m/%Y T %H:%M:%S",tz="Europe/Paris")
day.time2
day.time2$year
date.hour=strptime("2011-03-27 01:30:00", "%Y-%m-%d %H:%M:%S")
date=c("26/10/2016")
time=c("19:51:30")
day<-paste(date,"T", time)
day.time1=as.POSIXct(day,format="%d/%m/%Y T %H:%M:%S",tz="Europe/Paris")
day.time1
day.time1$year
day.time2=as.POSIXlt(day,format="%d/%m/%Y T %H:%M:%S",tz="Europe/Paris")
day.time2
day.time2$year
models <- c("intercept only" = "y ~ 1",
"linear" = "y ~ x",
"quadratic" = "y ~ x + I(x^2)",
"cubic" = "y ~ x + I(x^2) + I(x^3)")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(tidyr)
library(lubridate)
library(forcats)
library(pander)
install.packages("pander")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(tidyr)
library(lubridate)
library(forcats)
library(pander)
library(ggplot2)
election_2016 <- read_csv(file ="https://raw.githubusercontent.com/clanfear/CSSS508/master/Homework/HW5/king_county_elections_2016.txt")
election_2016 %>%
select (Precinct) %>%
distinct() %>%
head(10)
election_2016 %>%
select (Precinct) %>%
distinct() %>%
tail(10)
precinct_total <- election_2016 %>%
select(Precinct) %>%
distinct() %>%
nrow()
election_2016 %>%
distinct(Race) %>%
pander()
rel_races <- election_2016 %>%
filter(Race %in% c("US President & Vice President", "Governor", "Lieutenant Governor"))
pander(head(rel_races, 20), style = "rmarkdown", split.tables = 160)
precincts <- rel_races %>%
select(Precinct) %>%
distinct() %>%
arrange()
SEA_precincts <- rel_races %>%
mutate(SEA = ifelse(substr(Precinct, start = 1, stop = 4) == "SEA ","Seattle", "Not Seattle"))
pander(head(SEA_precincts, 10), style = "rmarkdown", split.tables = 160)
times_counted <- SEA_precincts %>%
select(Precinct, Race, CounterType, SumOfCount) %>%
filter(CounterType != "Registered Voters" & CounterType != "Times Counted") %>%
group_by(Precinct, Race) %>%
summarize(votes_added_up = sum(SumOfCount))
pander(head(times_counted, 10), style = "rmarkdown", split.tables = 160)
times_counted_compare <- SEA_precincts %>%
select(Precinct, Race, CounterType, SumOfCount) %>%
filter(CounterType == "Times Counted") %>%
rename(times_counted_value = SumOfCount) %>%
left_join(times_counted, by = c("Precinct", "Race")) %>%
mutate(diff = times_counted_value - votes_added_up)
summary(times_counted_compare$diff)
SEA_precincts %>%
filter(Race == "US President & Vice President") %>%
filter(CounterType %in% c("Registered Voters", "Times Counted")) %>%
select(Precinct, SEA, CounterType, SumOfCount) %>%
spread(key = CounterType, value = SumOfCount)
SEA_precincts %>%
filter(Race == "US President & Vice President") %>%
filter(CounterType %in% c("Registered Voters", "Times Counted")) %>%
select(Precinct, SEA, CounterType, SumOfCount) %>%
spread(key = CounterType, value = SumOfCount) %>%
mutate(Turnout = `Times Counted` / `Registered Voters`)
times_counted <- SEA_precincts %>%
select(Precinct, Race, CounterType, SumOfCount) %>%
filter(CounterType != "Registered Voters" & CounterType != "Times Counted") %>%
group_by(Precinct, Race) %>%
summarize(votes_added_up = sum(SumOfCount))
pander(head(times_counted, 10), style = "rmarkdown", split.tables = 160)
times_counted_compare <- SEA_precincts %>%
select(Precinct, Race, CounterType, SumOfCount) %>%
filter(CounterType == "Times Counted") %>%
rename(times_counted_value = SumOfCount) %>%
left_join(times_counted, by = c("Precinct", "Race")) %>%
mutate(diff = times_counted_value - votes_added_up)
summary(times_counted_compare$diff)
turnout_rates <- SEA_precincts %>%
filter(Race == "US President & Vice President") %>%
filter(CounterType %in% c("Registered Voters", "Times Counted")) %>%
select(Precinct, SEA, CounterType, SumOfCount) %>%
spread(key = CounterType, value = SumOfCount) %>%
mutate(Turnout = `Times Counted` / `Registered Voters`)
times_counted <- SEA_precincts %>%
select(Precinct, Race, CounterType, SumOfCount) %>%
filter(CounterType != "Registered Voters" & CounterType != "Times Counted") %>%
group_by(Precinct, Race) %>%
summarize(votes_added_up = sum(SumOfCount))
pander(head(times_counted, 10), style = "rmarkdown", split.tables = 160)
times_counted_compare <- SEA_precincts %>%
select(Precinct, Race, CounterType, SumOfCount) %>%
filter(CounterType == "Times Counted") %>%
rename(times_counted_value = SumOfCount) %>%
left_join(times_counted, by = c("Precinct", "Race")) %>%
mutate(diff = times_counted_value - votes_added_up)
summary(times_counted_compare$diff)
turnout_rates <- SEA_precincts %>%
filter(Race == "US President & Vice President") %>%
filter(CounterType %in% c("Registered Voters", "Times Counted")) %>%
select(Precinct, SEA, CounterType, SumOfCount) %>%
spread(key = CounterType, value = SumOfCount) %>%
mutate(Turnout = `Times Counted` / `Registered Voters`)
test <- c("Example 1", "Example 2", "Example 3")
test
substr(test, 1, 4)
?c
test <- c("Example 1", "Example 2", "Example 3")
tet
test
substr(test, 1, 4)
# Chunk 1: setup
library(ggplot2)
library(dplyr)
# Chunk 3
options(digits = 3)
# Chunk 4
swiss_means <- setNames(numeric(ncol(swiss)), colnames(swiss))
for(i in seq_along(swiss)) {
swiss_means[i] <- mean(swiss[[i]])
}
swiss_means
# Chunk 5
for(i in 1:10) {
# inside for, output won't show up w/o "print"
print(i^2)
}
# Chunk 6
for(i in 1:3) {
print(i^2)
}
# Chunk 7
i <- 1
print(i^2)
i <- 2
print(i^2)
i <- 3
print(i^2)
# Chunk 8
some_letters <- letters[4:6]
for(i in some_letters) {
print(i)
}
i # in R, this will exist outside of the loop!
# Chunk 9
for(a in seq_along(some_letters)) {
print(paste0("Letter ", a, ": ", some_letters[a]))
}
a # The object `a` contains the number of the last iteration
# Chunk 10
# preallocate numeric vector
iters <- 10
output <- numeric(iters)
for(i in 1:iters) {
output[i] <- (i-1)^2 + (i-2)^2
}
output
# Chunk 11
(names_to_use <- paste0("iter ", letters[1:5]))
# without setNames:
a_vector <- numeric(5)
names(a_vector) <- names_to_use
# with setNames: first arg = values, second = names
(a_vector <- setNames(numeric(5), names_to_use))
# Chunk 12
set.seed(98115)
# simulating example data:
n <- 300
x <- rnorm(n, mean = 5, sd = 4)
fake_data <- data.frame(x = x, y = -0.5 * x + 0.05 * x^2 + rnorm(n, sd = 1))
# Chunk 13
ggplot(data = fake_data, aes(x = x, y = y)) +
geom_point() +
ggtitle("Our fake data")
# Chunk 14
models <- c("intercept only" = "y ~ 1",
"linear" = "y ~ x",
"quadratic" = "y ~ x + I(x^2)",
"cubic" = "y ~ x + I(x^2) + I(x^3)")
# Chunk 15
fitted_lms <- vector("list", length(models)) # initialize list
names(fitted_lms) <- names(models) # give entries good names
fitted_lms # display the pre-allocated (empty) list
# Chunk 16
for(mod in names(models)) {
fitted_lms[[mod]] <- lm(formula(models[mod]), data = fake_data)
}
# Chunk 17
# initialize data frame to hold predictions
predicted_data <- fake_data
for(mod in names(models)) {
# make a new column in predicted data for each model's predictions
predicted_data[[mod]] <- predict(fitted_lms[[mod]],
newdata = predicted_data)
}
# Chunk 18
head(predicted_data, 10)
library(tidyr)
tidy_predicted_data <- predicted_data %>%
gather(Model, Prediction, -x, -y) %>%
mutate(Model = factor(Model, levels = names(models)))
head(tidy_predicted_data, 15)
196/2272
library(ggeffects)
?ggpredict
?predict.glmer
library(lmer)
install.packages("lmer")
install.packages("lme4")
install.packages("lme4")
prices  <- c(20000, 21000, 22000)
taxes <- c(8,10)
cbind(prices*taxes[1], prices*taxes[2])
prices  <- c(20000, 21000, 22000)
taxes <- c(1.08,1.10)
cbind(prices*taxes[1], prices*taxes[2])
cbind(prices*taxes[1], prices*taxes[2]) - 5000
?`$`
?swiss
install.packages("tinytex")
tinytex::install_tinytex()
tinytex:::is_tinytex()
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(comment = "##")
example <- c(-1,0,2,-2,1)
ifelse(example > 0, "Positive", "Not Positive")
ggplot(data=gapminder, aes(x = gdpPercap, y = lifeExp, color = country)) +
geom_point() +
xlab("GDP Per Capita") + ylab("Life Expectancy") +
ggtitle("GDP and Life Expectancy") +
theme_classic()
library(ggplot2)
library(gapminder)
ggplot(data=gapminder, aes(x = gdpPercap, y = lifeExp, color = country)) +
geom_point() +
xlab("GDP Per Capita") + ylab("Life Expectancy") +
ggtitle("GDP and Life Expectancy") +
theme_classic()
ggplot(data=gapminder, aes(x = gdpPercap, y = lifeExp, color = country)) +
geom_point() +
xlab("GDP Per Capita") + ylab("Life Expectancy") +
ggtitle("GDP and Life Expectancy") +
theme_classic() +
theme(legend.position = "none")
ggplot(data=gapminder, aes(x = gdpPercap, y = lifeExp, color = country)) +
geom_point() +
ggplot2::scale_x_log10() +
xlab("GDP Per Capita") + ylab("Life Expectancy") +
ggtitle("GDP and Life Expectancy") +
theme_classic() +
theme(legend.position = "none")
?scale
c(1,2,3)[[3]]
c(1,2,3)[3]
?`%%`
?options
?print
?print.list
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(comment = "##")
print(str(my_list[[3]]), max=5)
?str
swiss
library(gapminder)
library(ggplot2)
ggplot(gapminder %>% filter(country=="Singapore"), aes(year, gdpPercap, group=country)) + geom_line()
library(dplyr)
ggplot(gapminder %>% filter(country=="Singapore"), aes(year, gdpPercap, group=country)) + geom_line()
library(ggplot2)
library(gapminder)
library(dplyr)
top_3 <- gapminder %>% filter(country %in% c("China", "Japan", "India"))
ggplot(data = top_3, aes(x = year, y = gdpPercap, group = country)) +
geom_line() +
scale_color_manual(
name = "Top 3\nCountries\nin Asia",
values = c("China" = "aquamarine2", "Japan" = "cadetblue",
"India" = "deepskyblue3")) +
ggtitle("Changes in GDP Over Time in China, Japan, & India") +
xlab("Year") +
ylab("GDP")
ggplot(data = top_3, aes(x = year, y = gdpPercap, group = country, color = country)) +
geom_line() +
scale_color_manual(
name = "Top 3\nCountries\nin Asia",
values = c("China" = "aquamarine2", "Japan" = "cadetblue",
"India" = "deepskyblue3")) +
ggtitle("Changes in GDP Over Time in China, Japan, & India") +
xlab("Year") +
ylab("GDP")
ggplot(data = top_3, aes(x = year, y = log(gdpPercap), group = country, color = country)) +
geom_line() +
scale_color_manual(
name = "Top 3\nCountries\nin Asia",
values = c("China" = "aquamarine2", "Japan" = "cadetblue",
"India" = "deepskyblue3")) +
ggtitle("Changes in GDP Over Time in China, Japan, & India") +
xlab("Year") +
ylab("GDP")
?ggplot2
ggplot(data = top_3, aes(x = year, y = gdpPercap, group = country, color = country)) +
geom_line() + scale_y_log10() +
scale_color_manual(
name = "Top 3\nCountries\nin Asia",
values = c("China" = "aquamarine2", "Japan" = "cadetblue",
"India" = "deepskyblue3")) +
ggtitle("Changes in GDP Over Time in China, Japan, & India") +
xlab("Year") +
ylab("GDP")
?set.seed
>mutate
?mutate
?dplyr::mutate
library(dplyr)
library(nycflights13)
glimpse(airports)
airports %>% count(dst)
glimpse(flights)
flights %>%
filter(origin %in% c("JFK", "LGA", "EWR")) %>%
left_join(airports, by=c("dest"="faa")) %>%
count(name)
flights %>%
filter(origin %in% c("JFK", "LGA", "EWR")) %>%
left_join(airports, by=c("dest"="faa")) %>%
count(name) %>%
arrange(desc(n))
?parse_number
??parse_number
