CSSS 508, Week 8: Strings
====================================================================================
author: Charles Lanfear
date: May 17, 2017
transition: linear
width: 1100
height: 750


Data Today
====================================================================================

We'll use data on food safety inspections in King County from [data.kingcounty.gov](https://data.kingcounty.gov/Health/Food-Establishment-Inspection-Data/f29f-zza5). You can see a map of the data at [dinegerous.com](http://www.dinegerous.com/). Note these data are *quite large*.

```{r setup, echo=FALSE, warning=FALSE, message=FALSE}
library(tidyverse)
setwd("C:/Users/cclan/OneDrive/GitHub/CSSS508/Lectures/Week8/")
load("restaurants.Rdata")
```

```{r download_restaurant_data, eval=FALSE}
library(tidyverse)
restaurants <- read_csv("https://clanfear.github.io/CSSS508/Lectures/Week8/restaurants.csv")
```



Strings
====================================================================================

A general programming term for a unit of character data is a **string**, which is defined
as *a sequence of characters*. In R the terms "string" and "character data" are mostly interchangeable.

In other languages, a string often also refers a *sequence* of numeric information, such as
binary strings (e.g. "01110000 01101111 01101111 01110000").

Note that these are *sequences* of numbers rather than single numbers, and thus *strings*.


Basic String Things
====================================================================================
type: section

nchar()
====================================================================================
incremental: true

We've seen the `nchar()` function to get the number of characters in a string. How many characters are in the ZIP codes?

```{r nchar_zip}
restaurants %>% mutate(ZIP_length = nchar(Zip_Code)) %>%
    group_by(ZIP_length) %>% tally()
```

substr()
====================================================================================
incremental: true

You may be familiar with `substr` from the voting homework. We can use it to pull out just the first 5 digits of the ZIP code.

```{r substr}
restaurants <- restaurants %>%
    mutate(ZIP_5 = substr(Zip_Code, 1, 5))
head(unique(restaurants$ZIP_5))
```


paste()
====================================================================================
incremental: true

We can combine parts of strings together using the `paste` function, e.g. to make a whole mailing address:

```{r mailing_address}
restaurants <- restaurants %>%
    mutate(mailing_address = paste(Address, ", ", City, ", WA ", ZIP_5, sep = ""))
head(unique(restaurants$mailing_address))
```

paste() with collapse
====================================================================================
incremental: true

`readr` functions can take an argument like `col_types = "cciDcnncii"`. You can build this yourself from existing data using `class` to get the type of data, `substr`, and `paste` with the `collapse = ""` argument to take a vector and make it a single character string:

```{r readr_types_example}
# use the class function to get the type of data
column_types <- sapply(restaurants, class)
# extract 1st character
column_types_1 <- substr(column_types, 1, 1)
# use paste with collapse to get one string
(column_types_collapse <- paste(column_types_1, collapse = ""))
```


Make a function out of this!
====================================================================================
incremental: true

I typically read in data using `read_csv` without `col_types`, use a function like this to get its guesses at the types, which I can then modify and feed back into `read_csv`:

```{r function_to_get_types}
readr_input_types <- function(data) {
    column_types_1 <- substr(sapply(data, class), 1, 1)
    return(paste(column_types_1, collapse = ""))
}
readr_input_types(swiss)
readr_input_types(restaurants)
```


paste0()
====================================================================================
incremental: true

`paste0` is a convenient version of `paste` where it'll smush together what you're pasting without any separator.

```{r paste0}
paste(1:5, letters[1:5]) # sep is a space by default
paste(1:5, letters[1:5], sep ="")
paste0(1:5, letters[1:5])
```


paste() practice
====================================================================================

`sep` controls what happens when doing entry-wise squishing of vectors you give to `paste()`/`paste0()`, while `collapse` controls if/how they go from a vector to a single string.

Try to guess what will happen in each of these cases, then run it to check:

```{r paste_practice, eval=FALSE}
paste(letters[1:5], collapse = "!")
paste(1:5, letters[1:5], sep = "+")
paste0(1:5, letters[1:5], collapse = "???")
paste(1:5, "Z", sep = "*")
paste(1:5, "Z", sep = "*", collapse = " ~ ")
```


stringr
====================================================================================
type: section

stringr
====================================================================================

`stringr` is yet another R package from the Tidyverse (like `ggplot2`, `dplyr`, `tidyr`, `lubridate`, `readr`). It provides functions to:

* Replace some basic string functions like `paste` and `nchar` in a way that's a bit less touchy with missing values or factors
* Remove whitespace or pad it out
* Perform tasks related to **pattern matching**: Detect, locate, extract, match, replace, split.
    + Functions use **regular expressions** to describe patterns
    + Base R versions for these exist but are more confusing to use

Conveniently, most `stringr` functions also begin with "`str_`" to make RStudio auto-complete more useful.
    
```{r load_stringr}
library(stringr)
```


stringr: Basic function equivalencies
====================================================================================
incremental: true

* `str_sub()` is like `substr()` but also lets you put in negative values to count backwards from the end (-1 is the end, -2 is second from end):

```{r str_sub_example}
str_sub("Washington", 1, -3)
```

* `str_c()` ("string combine") is just like `paste()` but where default is `sep = ""` (like `paste0()`)

```{r str_c_example}
str_c(letters[1:5], 1:5)
```


stringr: Basic function equivalencies
====================================================================================
incremental: true

* `str_length()` is equivalent to `nchar()`:

```{r nchar_v_str_length}
nchar("weasels")
str_length("weasels")
```


Changing Cases
====================================================================================
incremental: true

`str_to_upper()`, `str_to_lower()`, `str_to_title()` convert cases, which is often a good idea to do before searching for values:

```{r make_seattle_uppercase}
head(unique(restaurants$City))
restaurants <- restaurants %>%
    mutate_each(funs(str_to_upper), Name, Address, City)
head(unique(restaurants$City))
```

Whitespace
====================================================================================
incremental: true

Extra leading or trailing whitespace is common in text data:

```{r show_whitespace}
head(unique(restaurants$Name, 4))
```

Any character column is potentially affected. Let's find all the character columns:

```{r get_char_columns}
column_types <- sapply(restaurants, class)
char_columns <- names(column_types)[column_types == "character"]
```

Using `str_trim()` to Clean Up Whitespace
====================================================================================
incremental: true

Then we can use the `str_trim()` function in `stringr` to clean them up all at once:

```{r clean_whitespace}
# use mutate_each_ to trim all the character columns
restaurants <- restaurants %>%
    mutate_each_(funs(str_trim), char_columns)
head(unique(restaurants$Name), 4)
```


Regular Expressions and Pattern Matching
====================================================================================
type: section


What are Regular Expressions?
====================================================================================
incremental: true

**Regular expressions** or **regex**es are how we describe patterns we are looking for
in text in a way that a computer can understand. We write an **expression**, apply it
to a string input, and then can do things with **matches** we find.

* **Literal characters** are defined snippets to search for like `SEA` or `206`
* **Metacharacters** let us be flexible in describing patterns:
    + backslash `\`, caret `^`, dollar sign `$`, period `.`, pipe `|`, question mark `?`, asterisk `*`, plus sign `+`, parentheses `(` and `)`, square brackets `[` and `]`, curly braces `{` and `}`
    + To treat a metacharacter as a literal character, you must **escape** it with two preceding backslashs `\\`, e.g. to match `(206)` including the parentheses, you'd use `\\(206\\)` in your regex


Simple regex Searches with str_detect()
====================================================================================
incremental: true

I want to get inspections for coffee shops. I'll say a coffee shop is anything that has "COFFEE", "ESPRESSO", or "ROASTER" in the name. The `regex` for this is `COFFEE|ESPRESSO|ROASTER` because `|` is a metacharacter that means "OR". Use the `str_detect()` function, which returns `TRUE` if it finds what you're looking for and `FALSE` if it doesn't (similar to `grepl()`):

```{r coffee_check}
coffee <- restaurants %>% filter(str_detect(Name, "COFFEE|ESPRESSO|ROASTER"))
head(unique(coffee$Name))
```

Will My Coffee Kill Me?
====================================================================================
incremental: true

Let's take each unique business identifier, keep the most recent inspection score, and look at a histogram of scores:

```{r coffee_histogram, fig.width = 10, fig.height = 3, dpi=300, out.width="1100px", out.height="330px"}
with(coffee %>% select(Business_ID, Name, Inspection_Score, Date) %>% group_by(Business_ID) %>% filter(Date == max(Date)) %>% distinct(.keep_all=TRUE), hist(Inspection_Score, xlab = "Most recent inspection score", main = "Most recent inspection scores\nfor Seattle coffee shops"))
```


Looking for Patterns with str_detect()
====================================================================================
incremental: true

Let's look for phone numbers whose first three digits are "206" using `str_detect()`. We will want it to work whether they have parentheses around the beginning or not, but NOT to match "206" occurring elsewhere:

```{r look_for_206}
area_code_206_pattern <- "^\\(?206"
phone_test_examples <- c("2061234567", "(206)1234567", "(206) 123-4567", "555-206-1234")
str_detect(phone_test_examples, area_code_206_pattern)
```

* `^` is a metacharacter meaning "look only at the *beginning* of the string"
* `\\(?` means look for a left parenthesis (`\\(`), but it's optional (`?`)
* `206` is the literal character to look for after the optional parenthesis

str_view()
====================================================================================
incremental: true

`stringr` also has a function called `str_view()` that allows you to see in the viewer pane *exactly*
what text is being selected with a regular expression.

```{r str_view, eval=FALSE}
str_view(phone_test_examples, area_code_206_pattern)
```

This will generate a small web page in the viewer pane (but not in Markdown docs).
Just be careful to not load an entire long vector / variable or it may crash RStudio
as it tries to render a massive page!

How Many Rows Have Non-206 Numbers?
====================================================================================
incremental: true

```{r look_for_206_rest}
restaurants %>% mutate(has_206_number = str_detect(Phone, area_code_206_pattern)) %>% group_by(has_206_number) %>% tally()
```


Extracting Patterns with str_extract()
====================================================================================
incremental: true

Let's extract the [directional part of Seattle](https://en.wikipedia.org/wiki/Street_layout_of_Seattle#Directionals) an address is in: N, NW, SE, none, etc.


```{r test_direction}
direction_pattern <- " (N|NW|NE|S|SW|SE|W|E)( |$)"
direction_test_examples <- c("2812 THORNDYKE AVE W", "512 NW 65TH ST", "407 CEDAR ST", "15 NICKERSON ST")
str_extract(direction_test_examples, direction_pattern)
```

* The first space will match a space character, then
* `(N|NW|NE|S|SW|SE|W|E)` matches one of the directions in the group
* `( |$)` is a group saying either there is a space after, or it's the end of the address string (`$` means the end of the string)


Where in the City are the Addresses?
====================================================================================
incremental: true

```{r extract_directions}
restaurants %>% distinct(Address) %>% mutate(city_region = str_trim(str_extract(Address, direction_pattern))) %>% group_by(city_region) %>% tally() %>% arrange(desc(n))
```


Find/Replacing with str_replace()
====================================================================================
incremental: true

Maybe we want to do a street-level analysis of inspections (e.g. compare The Ave to Pike Street). How can we remove building numbers?

```{r test_address_numbers}
address_number_pattern <- "^[0-9]*-?[A-Z]? (1/2 )?"
address_number_test_examples <- c("2812 THORNDYKE AVE W", "1ST AVE", "10A 1ST AVE", "10-A 1ST AVE", "5201-B UNIVERSITY WAY NE", "7040 1/2 15TH AVE NW")
str_replace(address_number_test_examples, address_number_pattern, replacement = "")
```

How Does the Building Number regex Work?
====================================================================================

Let's break down `"^[0-9]*-?[A-Z]? (1/2 )?"`:

* `^[0-9]` means look for a digit between 0 and 9 (`[0-9]`) at the beginning (`^`)
* `*` means potentially match more digits after that
* `-?` means optionally (`?`) match a hyphen (`-`)
* `[A-Z]?` means optionally match (`?`) a letter (`[A-Z]`)
* Then we match a space ( )
* `(1/2 )?` optionally matches a 1/2 followed by a space since this is apparently a thing with some address numbers


Replacing the Street Numbers with... Nothing
====================================================================================
incremental: true

```{r replace_numbers}
restaurants <- restaurants %>% mutate(street_only = str_replace(Address, address_number_pattern, replacement = ""))
head(unique(restaurants$street_only), 12)
```


Can We Remove Units/Suites Too?
====================================================================================
incremental: true

Getting rid of unit/suite references is tricky, but a decent attempt would be to drop anything including and after "#", "STE", "SUITE", "SHOP", "UNIT":

```{r test_unit_numbers}
address_unit_pattern <- " (#|STE|SUITE|SHOP|UNIT).*$"
address_unit_test_examples <- c("1ST AVE", "RAINIER AVE S #A", "FAUNTLEROY WAY SW STE 108", "4TH AVE #100C", "NW 54TH ST")
str_replace(address_unit_test_examples, address_unit_pattern, replacement = "")
```

How'd the Unit regex Work?
====================================================================================
incremental: true

Breaking down `" (|#|STE|SUITE|SHOP|UNIT).*"`:

* First we match a space
* `(#|STE|SUITE|SHOP|UNIT)` matches one of those words
* `.*$` matches *any* character (`.`) after those words, zero or more times (`*`), until the end of the string (`$`)


Removing Units/Suites in Restaurant Data
====================================================================================
incremental: true

```{r replace_units}
restaurants <- restaurants %>% mutate(street_only = str_trim(str_replace(street_only, address_unit_pattern, replacement = "")))
head(unique(restaurants$street_only), 15)
```


Which Streets had the Most Restaurants with Scores Above 45?
====================================================================================
incremental: true

Let's get one row per restaurant per date with the score, and see which streets the ones above 45 are on:
```{r failed_inspections}
restaurants %>% select(Business_ID, Name, Date, Inspection_Score, street_only) %>% distinct() %>% filter(Inspection_Score > 45) %>% group_by(street_only) %>% tally() %>% arrange(desc(n)) %>% head(n=5)
```


Splitting up Strings
====================================================================================
incremental: true

You can split up strings using `tidyr::separate()`, seen in Week 5. Another option is `str_split()`, which will split strings based on a pattern separating parts and put these components in a list. `str_split_fixed()` will do that but with a matrix instead (so can't have varying numbers of separators):

```{r str_split_violation}
head(str_split_fixed(restaurants$Violation_Description, " - ", n = 2))
```


Next week
====================================================================================

Homework 6 assigned last week is due next week, and peer reviews due the week after.


**The end is nigh**: In class next week, you'll be working on a lab on *mapping* the restaurant inspection data,
which serves as an *optional* final homework due in week 10. If you turn it in, I
will grade it myself and give you feedback and **bonus points** based on the standard grading rubric (0 to 3).

*You will have nothing assigned or due in dead week or finals week.*