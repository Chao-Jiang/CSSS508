library(pacman)
?pacman
??pacman
p_unlock()
update.packages(type="both")
update.packages()
library(installr)
?updateR
updateR()
?update.packages
update.packages()
library(httr)
library(yaml)
library(jsonlite)
library(dplyr)
??yaml
nyt_api <- yaml.load_file("nyt_api.yml")
?readRDS
rm(list=ls())
setwd("C:/Users/Charles/Dropbox/z-UW Classes/SOC560 Hierarchical Stats/HW1")
library(mlmRev)
library(dplyr)
data(egsingle)
p1.out <- lm(math~schoolid, data=egsingle, contrasts=list(schoolid="contr.sum"))
mu.school <- with(egsingle, tapply(math,schoolid,mean))
nj <- with(egsingle, tapply(math,schoolid,length))
n.school <- length(mu.school)
math.class <- with(egsingle, split(math,schoolid))
SS <- 0
for (j in 1:n.school){
SS <- SS + sum ((math.class[[j]]-mu.school[j])^2)
}
SD <- sqrt ( SS/(length(math)-length(mu.school)) )
SD <- sqrt( SS/(length(egsingle$math)-length(mu.school)) )
sigma2y <- SD^2 	# Average within-school variance
sigma2alpha <- var (mu.school)  # Average between school-variance
icc <- sigma2alpha / (sigma2alpha + sigma2y)
sigma2y
sigma2alpha
icc
MSW <- anova(p1.out)["Residuals","Mean Sq"]
MSB <- anova(p1.out)["schoolid","Mean Sq"]
ICC <- (MSB-MSW)/(MSB+MSW)
data.frame(Statistic=c("MSW","MSB","ICC"),Value=c(MSW,MSB,ICC))
ICC <- (MSB)/(MSB+MSW)
data.frame(Statistic=c("MSW","MSB","ICC"),Value=c(MSW,MSB,ICC))
data.frame(sigma2y, sigma2alpha, ICC)
icc <- sigma2alpha / (sigma2alpha + sigma2y)
data.frame(sigma2y=sigma2y, sigma2alpha=sigma2alpha, ICC=icc)
data.frame(Statistic=c("Sigma^2_y","Sigma^2_alpha", "ICC"),
Value=c(sigma2y, sigma2alpha, icc))""
data.frame(Statistic=c("Sigma^2_y","Sigma^2_alpha", "ICC"),
Value=c(sigma2y, sigma2alpha, icc))
s2y <- SD^2 	           # Mean within-school variance
s2a <- var (mu.school)   # Mean between school-variance
icc <- s2a / (s2a + s2y) # Intraclass Correlation Coefficient
data.frame(Statistic=c("Sigma^2_y","Sigma^2_alpha", "ICC"),
Value=c(s2y, s2a, icc))
deff <- 1+(29-1)*icc; deff
ci.mean <- function(x) {
c(mean(x)-2*sd(x)/sqrt(length(x)),
mean(x)+2*sd(x)/sqrt(length(x)))
}
ci.mean(egsingle$math)
mean(egsingle$math)
ci.mean(egsingle$math)
ci.mean <- function(x,deff=1) {
c(mean(x)-2*sqrt(var(x))*deff/sqrt(length(x)),
mean(x)+2*sqrt(var(x))*deff/sqrt(length(x)))
}
mean(egsingle$math)
ci.mean(egsingle$math)
ci.mean(egsingle$math, deff=deff)
ci.mean <- function(x,deff=1) {
c(mean(x)-2*sd(x)/sqrt(length(x)/deff),
mean(x)+2*sd(x)*deff/sqrt(length(x)/deff))
}
ci.mean(egsingle$math, deff=deff)
ci.mean <- function(x,deff=1) {
c(mean(x)-2*sqrt(var(x)*deff)/sqrt(length(x)),
mean(x)+2*sqrt(var(x)*deff)/sqrt(length(x)))
}
ci.mean(egsingle$math, deff=deff)
ci.mean <- function(x,deff=1) {
c(mean(x)-2*sd(x)/sqrt(length(x)/deff),
mean(x)+2*sd(x)*deff/sqrt(length(x)/deff))
}
ci.mean(egsingle$math, deff=deff)
ci.mean(egsingle$math)*deff
ci.mean(egsingle$math)*sqrt(deff)
ci.mean <- function(x,deff=1) {
c(mean(x)-2*sqrt(var(x))*sqrt(deff)/sqrt(length(x)),
mean(x)+2*sqrt(var(x))*sqrt(deff)/sqrt(length(x)))
}
ci.mean(egsingle$math, deff=deff)
ci.mean <- function(x,deff=1) {
c(mean(x)-2*sqrt(var(x)*deff)/sqrt(length(x)),
mean(x)+2*sqrt(var(x)*deff)/sqrt(length(x)))
}
ci.mean(egsingle$math, deff=deff)
se.mean <- function(x,deff) {
sqrt(var(x)*deff)/sqrt(length(x))
}
se.mean(egsingle$math)
se.mean(egsingle$math)
se.mean <- function(x,deff=1) {
sqrt(var(x)*deff)/sqrt(length(x))
}
se.mean(egsingle$math)
se.mean(egsingle$math, deff=deff)
mean(egsingle$math)
ci.mean(egsingle$math)
ci.mean(egsingle$math, deff=deff)
se.mean(egsingle$math, deff=deff) - se.mean(egsingle$math)
se.mean(egsingle$math, deff=deff) - se.mean(egsingle$math)
se.mean(egsingle$math, deff=deff)
mean(egsingle$math)
se.mean <- function(x,deff=1) {
sqrt(var(x)*deff)/sqrt(length(x))
}
se.mean(egsingle$math)
p1.coef
p1.out <- lm(math~schoolid, data=egsingle, contrasts=list(schoolid="contr.sum"))
p1.coef <- summary(p1.out)$coefficients[-1,]
p1.coef
summary(p1.out)$coefficients
install.packages("SpatialEpi")
library(SpatialEpi)
data(scotland)
scot.data <- scotland$data
scot.data$SMR <- with(scot.data, cases/expected)
with(scot.data, plot(AFF, SMR, type='n'))
with(scot.data, text(AFF, SMR))
?mapvariable
mod1 <- glm(cases~offset(log(expected)) + AFF, data=scot.data, family=quasipoisson(link="log"))
summary(mod1)
mapvariable(scotdata$SMR, spatial.polygon=scotland$spatial.polygon)
mapvariable(scot.data$SMR, spatial.polygon=scotland$spatial.polygon)
mapvariable(scot.data$SMR, spatial.polygon=scotland$spatial.polygon)
mapvariable(scot.data$AFF, spatial.polygon=scotland$spatial.polygon)
exp(-0.5423)
scot.data
?scotland
scot.data$east <- scotland$geo$x
scot.data$north <- scotland$geo$y
mod1 <- glm(cases~offset(log(expected)) + AFF + east + north, data=scot.data, family=quasipoisson(link="log"))
summary(mod1)
mapvariable(scot.data$SMR, spatial.polygon=scotland$spatial.polygon)
mapvariable(scot.data$AFF, spatial.polygon=scotland$spatial.polygon)
?mapvariable
mapvariable(scot.data$SMR, spatial.polygon=scotland$spatial.polygon)
mapvariable(scot.data$AFF, spatial.polygon=scotland$spatial.polygon)
par(mfrow=c(1,2))
mapvariable(scot.data$SMR, spatial.polygon=scotland$spatial.polygon)
mapvariable(scot.data$AFF, spatial.polygon=scotland$spatial.polygon)
mapvariable(scot.data$SMR, spatial.polygon=scotland$spatial.polygon)
mapvariable(scot.data$AFF, spatial.polygon=scotland$spatial.polygon)
mapvariable(scot.data$AFF, spatial.polygon=scotland$spatial.polygon, main="Proportion AFF by County")
mapvariable(scot.data$SMR, spatial.polygon=scotland$spatial.polygon, main="SMR by County")
mapvariable(scot.data$AFF, spatial.polygon=scotland$spatial.polygon, main="Proportion AFF by County")
mapvariable(scot.data$SMR, spatial.polygon=scotland$spatial.polygon, main="SMR by County")
confint(mod1)
mod2 <- glm(cases~offset(log(expected)) + AFF + east + north, data=scot.data, family=quasipoisson(link="log"))
summary(mod2)
mod1 <- glm(cases~offset(log(expected)) + AFF, data=scot.data, family=quasipoisson(link="log"))
summary(mod1)
confint(mod1)
sum(scot.data$expected)
sum(scot.data$expected)*10000
sum(scot.data$expected)*100000
100000*0.58
mod1
exp(-0.5423)*100000
exp(-0.5423)
exp(-0.5423)*1.4
scot.data
exp(-0.5423)*5.5
exp(-0.5423)
mod1
exp(7.3732)
exp(.73732)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(SpatialEpi)
data(scotland)
scot.data <- scotland$data
scot.data$SMR <- with(scot.data, cases/expected)
coef(mod1)
mod1 <- glm(cases~offset(log(expected)) + AFF, data=scot.data, family=quasipoisson(link="log"))
coef(mod1)
confint(mod1)
cbind(coef(mod1),
confint(mod1))
a <- cbind(coef(mod1), confint(mod1))
names(a)
colnames(a)
?cbind
a <- cbind(Estimate=coef(mod1), confint(mod1))
a
names(mod1)
mod1$coefficients
a <- cbind(Estimate=coef(mod1), SE=sqrt(c(vcov(mod1)[1,1],vcov(mod1)[2,2])),confint(mod1))
a
summary(mod1)
names(summary(mod1))
summary(mod1)$dispersion
rbind(cbind(Estimate=coef(mod1), SE=sqrt(c(vcov(mod1)[1,1], vcov(mod1)[2,2])),
confint(mod1)), c(summary(mod1)$dispersion, NA, NA, NA))
?cbind
rbind(cbind(Estimate=coef(mod1), SE=sqrt(c(vcov(mod1)[1,1], vcov(mod1)[2,2])),
confint(mod1)), Dispersion=c(summary(mod1)$dispersion, NA, NA, NA))
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(SpatialEpi)
data(scotland)
scot.data     <- scotland$data
scot.data$SMR <- with(scot.data, cases/expected)
scot.data$east  <- scotland$geo$x
scot.data$north <- scotland$geo$y
mod2 <- glm(cases~offset(log(expected)) + AFF + east + north, data=scot.data, family=quasipoisson(link="log"))
summary(mod2)
summary(mod2)$coefficients
scot.data$eastings  <- scotland$geo$x
scot.data$northings <- scotland$geo$y
mod2 <- glm(cases~offset(log(expected)) + AFF + eastings + northings, data=scot.data, family=quasipoisson(link="log"))
summary(mod2)$coefficients
mapvariable(scot.data$SMR, spatial.polygon=scotland$spatial.polygon,
main="SMR by County")
?scotland
scot.data
exp(-0.542)
mean(scot.data$SMR)
?mapvariable
?scotland
137-172.45
160.52 â€“ 137
160.52 - 137
137 - 160.52
?log
log(10)
log(11)
log(2.3)
log(2.4)
load("F:/data/merged/CAD_output.RData")
library(tidyr)
glimpse(CAD_output)
library(dplyr)
glimpse(CAD_output)
head(CAD_output, n=50)
length(unique(CAD_output$id))
table(CAD_output$race_cat)
CAD_output$race_cat <-  CAD_output$race_cat %>% str_trim(., "both")
library(tidyverse)
library(lubridate)
library(stringr)
CAD_output$race_cat <-  CAD_output$race_cat %>% str_trim(., "both")
table(CAD_output$race_cat)
table(CAD_output$year)
CAD_output$race_cat[CAD_output$race_cat=="AMERICAN INDIAN"]
table(CAD_output$year)
table(CAD_output$race_cat)
CAD_output$race_estimate <- NA
CAD_output$race_estimate <- as.character(NA)
CAD_output$race_estimate[CAD_output$race_cat %in% c("AMERICAN INDIAN", "American Indian or Alaska Native"] <- "AIAN"
CAD_output$race_estimate[CAD_output$race_cat %in% c("Asian", "ASIAN")] <- "ASIAN"
CAD_output$race_estimate[CAD_output$race_cat %in% c("BLACK", "Black or African American")] <- "BLACK"
CAD_output$race_estimate[CAD_output$race_cat %in% c("HISPANIC", "Hispanic or Latino")] <- "HISP"
CAD_output$race_estimate[CAD_output$race_cat %in% c("Native Hawaiian or Other Pacific Islander", "PACIFIC ISLANDER")] <- "NHPI"
CAD_output$race_estimate[CAD_output$race_cat %in% c("Two or More Races", "TWO OR MORE RACES")] <- "MULTI"
CAD_output$race_estimate[CAD_output$race_cat %in% c("White", "WHITE")]
CAD_output$race_estimate[CAD_output$race_cat %in% c("White", "WHITE")] <- "WHITE"
table(CAD_output$race_estimate)
table(CAD_output$race_estimate, useNA = TRUE)
table(CAD_output$race_estimate, useNA = "always")
table(CAD_output$race)
table(CAD_output$race, race_estimate)
table(CAD_output$race, CAD_output$race_estimate)
table(CAD_output$race, CAD_output$race_estimate, useNA="always")
CAD_output$race[CAD_output$race %in% c("","`")] <- NA
table(CAD_output$race, CAD_output$race_estimate, useNA="always")
CAD_output$race_out <- NA
CAD_output$race_out[CAD_race$race %in% NA] <- CAD_output$race_estimate[CAD_race$race %in% NA]
CAD_output$race_out[CAD_output$race %in% NA] <- CAD_output$race_estimate[CAD_output$race %in% NA]
CAD_output$race[CAD_output$race %in% c("","`","U","M","R"."I","F")] <- NA
CAD_output$race[CAD_output$race %in% "B"] <- "BLACK"
CAD_output$race[CAD_output$race %in% "A"] <- "ASIAN"
CAD_output$race[CAD_output$race %in% "W"] <- "WHITE"
CAD_output$race[CAD_output$race %in% c("","`","U","M","R","I","F")] <- NA
CAD_output$race[CAD_output$race %in% "B"] <- "BLACK"
CAD_output$race[CAD_output$race %in% "A"] <- "ASIAN"
CAD_output$race[CAD_output$race %in% "W"] <- "WHITE"
CAD_output$race[CAD_output$race %in% "H"] <- "HISP"
table(CAD_output$race, usaNA="always")
table(CAD_output$race, useNA="always")
CAD_output$race_out <- NA
CAD_output$race_out <- NA
CAD_output$race_out <- ifelse(CAD_output$race == CAD_output$race_estimate, CAD_output$race,
ifelse(CAD_output$race=="UNKNOWN", CAD_output$race_estimate,
ifelse(CAD_output$race_estimate=="UNKNOWN", CAD_output$race, NA))
)
table(CAD_output$race_out, useNA="always")
CAD_output$race_estimate <- as.character(NA)
CAD_output$race_estimate[CAD_output$race_cat %in% c("AMERICAN INDIAN", "American Indian or Alaska Native"] <- "AIAN"
CAD_output$race_estimate[CAD_output$race_cat %in% c("Asian", "ASIAN")] <- "ASIAN"
CAD_output$race_estimate[CAD_output$race_cat %in% c("BLACK", "Black or African American")] <- "BLACK"
CAD_output$race_estimate[CAD_output$race_cat %in% c("HISPANIC", "Hispanic or Latino")] <- "HISP"
CAD_output$race_estimate[CAD_output$race_cat %in% c("Native Hawaiian or Other Pacific Islander", "PACIFIC ISLANDER")] <- "NHPI"
CAD_output$race_estimate[CAD_output$race_cat %in% c("Two or More Races", "TWO OR MORE RACES")] <- "MULTI"
CAD_output$race_estimate[CAD_output$race_cat %in% c("White", "WHITE")] <- "WHITE"
CAD_output$race_estimate[CAD_output$race_estimate %in% NA] <- "UNKNOWN"
table(CAD_output$race, CAD_output$race_estimate, useNA="always")
# Keep white, black, asian
CAD_output$race[CAD_output$race %in% c("","`","U","M","R","I","F")] <- "UNKNOWN"
CAD_output$race[CAD_output$race %in% "B"] <- "BLACK"
CAD_output$race[CAD_output$race %in% "A"] <- "ASIAN"
CAD_output$race[CAD_output$race %in% "W"] <- "WHITE"
CAD_output$race[CAD_output$race %in% "H"] <- "HISP"
table(CAD_output$race, useNA="always")
table(CAD_output$race, CAD_output$race_estimate, useNA="always")
CAD_output$race[CAD_output$race %in% c("","`","U","M","R","I","F",NA)] <- "UNKNOWN"
table(CAD_output$race, CAD_output$race_estimate, useNA="always")
CAD_output$race_out <- NA
CAD_output$race_out <- ifelse(CAD_output$race == CAD_output$race_estimate, CAD_output$race,
ifelse(CAD_output$race=="UNKNOWN", CAD_output$race_estimate,
ifelse(CAD_output$race_estimate=="UNKNOWN", CAD_output$race, NA))
)
table(CAD_output$race_out)
table(CAD_output$race_out, CAD_output$year)
table(CAD_output$person_type)
CAD_output$type_suspect <- NA
CAD_output$type_suspect[CAD_output$person_type %in% c("ARRS", "ARST","SUSP")] <- 1
CAD_output$type_suspect <- 0
CAD_output$type_suspect[CAD_output$person_type %in% c("ARRS", "ARST","SUSP")] <- 1
table(CAD_output$race_out, CAD_output$type_suspect)
?prop.table
prop.table(table(CAD_output$race_out, CAD_output$type_suspect),1)
table(CAD_output$race_out, CAD_output$year, useNA="always")
table(CAD_output$race_out, useNA="always")
table(CAD_output$race_out, CAD_output$race useNA="always")
table(CAD_output$race_out, CAD_output$race, useNA="always")
table(CAD_output$race_out, CAD_output$race_estimate, useNA="always")
table(CAD_output$race_estimate, useNA="always")
table(CAD_output$race, useNA="always")
CAD_output$race_out <- NA
CAD_output$race_out <- ifelse(CAD_output$race == CAD_output$race_estimate, CAD_output$race,
ifelse(CAD_output$race=="UNKNOWN", CAD_output$race_estimate, CAD_output$race)
)
table(CAD_output$race_out, CAD_output$year, useNA="always")
prop.table(table(CAD_output$race_out, CAD_output$type_suspect),1)
table(CAD_output$race_out, CAD_output$type_suspect)
table(CAD_output$person_type)
table(CAD_output$call_type_start)
with(CAD_output[CAD_output$call_type_start=="CITIZEN CONTACT", prop.table(table(CAD_output$race_out, CAD_output$type_suspect),1))
with(CAD_output[CAD_output$call_type_start=="CITIZEN CONTACT"], prop.table(table(CAD_output$race_out, CAD_output$type_suspect),1))
with(CAD_output[CAD_output$call_type_start=="CITIZEN CONTACT",], prop.table(table(CAD_output$race_out, CAD_output$type_suspect),1))
prop.table(table(CAD_output$race_out, CAD_output$type_suspect),1)
prop.table(table(CAD_output$race_out[CAD_output$call_type_start=="CITIZEN CONTACT"], CAD_output$type_suspect[CAD_output$call_type_start=="CITIZEN CONTACT"]),1))
prop.table(table(CAD_output$race_out[CAD_output$call_type_start=="CITIZEN CONTACT"],
CAD_output$type_suspect[CAD_output$call_type_start=="CITIZEN CONTACT"]),1)
tab(CAD_output$year)
table(CAD_output$year)
load("F:/data/merged/SUS_OTH_output.RData")
table(SUS_OTH_output$year)
table(SUS_OTH_output$race_cat)
table(SUS_OTH_output$race)
table(SUS_OTH_output$stop_type)
table(SUS_OTH_output$incident_status)
install.packages("TraMineR")
library(TraMineR)
update.packages()
library(tidyverse)
install.packages("nlme")
library(tidyverse)
update.packages()
library(TraMineR)
update.packages("digest")
install.packages("digest")
library(TraMineR)
install.packages("data.table")
library(TraMineR)
library(RecordLinkage)
o.p <- function(odds){
prob <- odds/(1+odds)
return(prob)
}
p.o <- function(prob){
odds <- prob/(1-prob)
return(odds)
}
o.p(-.457-.489)
o.p((-.457-.489))
o.p(exp(-.457-.489))
exp(-.457-.489)
o.p(.61)
plot((1/1:10),1:10)
plot(-(1/1:10),1:10)
exp(.465)
exp(-.66)
p.o(0.0949)
0.7745/8694
0.7745/.8694
.8694/0.7745
7745/2255
-0.35+0+1.12+0+.87+0
1.065*16
exp(-0.696657)
exp(-0.0696657)
o.p <- function(odds){
prob <- odds/(1+odds)
return(prob)
}
p.o <- function(prob){
odds <- prob/(1-prob)
return(odds)
}
p.p(0.2089)
p.o(0.2089)
p.o(0.7745)
o.p(-.099)
o.p(-.098)
.2089-0.1199
0.8694-0.7745
o.p(exp(-.0983824))
exp(-.0983824)
exp(-.0990432)
o.p(exp(-.0990432))
p.o(exp(-.0990432))
p.o(-.0990432)
log(-.67)
exp(-.67)
?exp
o.p(exp(-.67))
o.p(exp(-.489))
exp(-.489)
exp(-.524)
o.p(exp(-.524))
568^(-.672)
log(.339)
-1.081^(-.672)
log(568)
6.34^(-.672)
0.1199-0.2089
0.7745-0.8694
library("dplyr")
library("audio")
notes <- c(A = 0, B = 2, C = 3, D = 5, E = 7, F = 8, G = 10)
pitch <- "D D E D G F# D D E D A G D D D5 B G F# E C5 C5 B G A G"
duration <- c(rep(c(0.75, 0.25, 1, 1, 1, 2), 2),
0.75, 0.25, 1, 1, 1, 1, 1, 0.75, 0.25, 1, 1, 1, 2)
bday <- data_frame(pitch = strsplit(pitch, " ")[[1]],
duration = duration)
bday <-
bday %>%
mutate(octave = substring(pitch, nchar(pitch)) %>%
{suppressWarnings(as.numeric(.))} %>%
ifelse(is.na(.), 4, .),
note = notes[substr(pitch, 1, 1)],
note = note + grepl("#", pitch) -
grepl("b", pitch) + octave * 12 +
12 * (note < 3),
freq = 2 ^ ((note - 60) / 12) * 440)
tempo <- 120
sample_rate <- 44100
make_sine <- function(freq, duration) {
wave <- sin(seq(0, duration / tempo * 60, 1 / sample_rate) *
freq * 2 * pi)
fade <- seq(0, 1, 50 / sample_rate)
wave * c(fade, rep(1, length(wave) - 2 * length(fade)), rev(fade))
}
bday_wave <-
mapply(make_sine, bday$freq, bday$duration) %>%
do.call("c", .)
play(bday_wave)
load(Cars)
load(cars)
data(cars)
View(cars)
?swiss
install.packages("pander")
Sys.getenv("USERPROFILE")
tempdir()
USERPROFILE <- Sys.getenv("USERPROFILE")
HOME <- file.path(USERPROFILE, "Documents", fsep = "\\")
file.path(HOME, "temp")
file.path(HOME, "temp", fsep = "\\")
TMPDIR <- file.path(HOME, "temp", fsep = "\\")
USERPROFILE <- Sys.getenv("USERPROFILE")
HOME <- file.path(USERPROFILE, "Documents", fsep = "\\")
R_USER <- HOME
R_LIBS_USER <- file.path(HOME, "R", "win-library", getRversion()[1, 1:2], fsep = "\\")
file.path(HOME, "temp", fsep = "\\")
Sys.info()[["sysname"]]
Sys.getenv("RSTUDIO", unset = NA)
!is.na(Sys.getenv("RSTUDIO", unset = NA))
Sys.info()[["sysname"]] == "Windows")
file.path(HOME, "Rtemp", fsep = "\\")
file.path(HOME, "Rtemp", "Rtemp2", fsep = "\\")
tempo <- 120
data(cars)
mean(cars[,1])
str(cars)
library(ggplot2)
ggplot(data=cars, aes(speed, distance)) + geom_point()
ggplot(data=cars, aes(speed, dist)) + geom_point()
setwd("C:/Users/cclan/OneDrive/GitHub/CSSS508/Lectures/Week2")
setwd("C:/Users/clanfear/OneDrive/GitHub/CSSS508/Lectures/Week2")
setwd("C:/Users/charles/OneDrive/GitHub/CSSS508/Lectures/Week2")
pander(summary(cars))
library(pander)
data(cars)
pander(summary(cars))
data(swiss)
