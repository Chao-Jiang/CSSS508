# Chunk 1: setup
setwd("C:/Users/cclan/OneDrive/GitHub/CSSS508/Lectures/Week5")
# Chunk 2
getwd()
# Chunk 4
library(readr)
# Chunk 5
billboard_2000_raw <- read_csv(file = "https://raw.githubusercontent.com/hadley/tidyr/master/vignettes/billboard.csv")
# Chunk 6
# str(billboard_2000_raw)
str(billboard_2000_raw[, 65:ncol(billboard_2000_raw)])
# Chunk 7
# paste is a concatenation function
# i = integer, c = character, D = date
# rep("i", 76) does the 76 weeks of integer ranks
bb_types <- paste(c("icccD", rep("i", 76)), collapse="")
billboard_2000_raw <- read_csv(file = "https://raw.githubusercontent.com/hadley/tidyr/master/vignettes/billboard.csv", col_types = bb_types)
# Chunk 9
dput(head(cars, 8))
# Chunk 10
temp <- structure(list(speed = c(4, 4, 7, 7, 8, 9, 10, 10), dist = c(2,
10, 4, 22, 16, 10, 18, 26)), .Names = c("speed", "dist"), row.names = c(NA, 8L), class = "data.frame")
# Chunk 12
library(dplyr)
library(tidyr)
billboard_2000 <- billboard_2000_raw %>%
gather(key = week, value = rank, starts_with("wk"))
dim(billboard_2000)
# Chunk 13
summary(billboard_2000$rank)
# Chunk 14
billboard_2000 <- billboard_2000_raw %>%
gather(key = week, value = rank, starts_with("wk"),
na.rm = TRUE)
summary(billboard_2000$rank)
# Chunk 15
billboard_2000 <- billboard_2000 %>%
separate(time, into = c("minutes", "seconds"),
sep = ":", convert = TRUE) %>%
mutate(length = minutes + seconds / 60) %>%
select(-minutes, -seconds)
summary(billboard_2000$length)
# Chunk 16
billboard_2000 <- billboard_2000 %>%
mutate(week = parse_number(week))
summary(billboard_2000$week)
# Chunk 17
(too_long_data <- data.frame(Group = c(rep("A", 3), rep("B", 3)), Statistic = rep(c("Mean", "Median", "SD"), 2), Value = c(1.28, 1.0, 0.72, 2.81, 2, 1.33)))
# Chunk 18
(just_right_data <- too_long_data %>%
spread(key = Statistic, value = Value))
# Chunk 19
# find best rank for each song
best_rank <- billboard_2000 %>%
group_by(artist, track) %>%
summarize(min_rank = min(rank),
weeks_at_1 = sum(rank == 1)) %>%
mutate(`Peak rank` = ifelse(min_rank == 1, "Hit #1", "Didn't #1"))
# merge onto original data
billboard_2000 <- billboard_2000 %>%
left_join(best_rank, by = c("artist", "track"))
# Chunk 20
library(ggplot2)
billboard_trajectories <- ggplot(
data = billboard_2000,
aes(x = week, y = rank,
group = track, color = `Peak rank`)
) +
geom_line(aes(size = `Peak rank`), alpha = 0.4) +
# rescale time: early weeks more important
scale_x_log10(breaks = seq(0, 70, 10)) +
# want rank 1 on top, not bottom
scale_y_reverse() + theme_classic() +
scale_color_manual(values = c("black", "red")) +
scale_size_manual(values = c(0.25, 1)) +
theme(legend.position = c(0.90, 0.25),
legend.background = element_rect(fill="transparent"))
# Chunk 21
billboard_trajectories
# Chunk 22
billboard_2000 %>%
select(artist, track, weeks_at_1) %>%
distinct(artist, track, weeks_at_1) %>%
arrange(desc(weeks_at_1)) %>%
head(7)
# Chunk 23
billboard_2000 <- billboard_2000 %>%
mutate(date = date.entered + (week - 1) * 7)
billboard_2000 %>% arrange(artist, track, week) %>%
select(artist, date.entered, week, date, rank) %>% head(4)
# Chunk 24
plot_by_day <- ggplot(billboard_2000,
aes(x = date, y = rank, group = track)) +
geom_line(size = 0.25, alpha = 0.4) +
# just show the month abbreviation label (%b)
scale_x_date(date_breaks = "1 month", date_labels = "%b") +
scale_y_reverse() + theme_bw() +
# add lines for start and end of year:
# input as dates, then make numeric for plotting
geom_vline(xintercept = as.numeric(as.Date("2000-01-01", "%Y-%m-%d")), col = "red") +
geom_vline(xintercept = as.numeric(as.Date("2000-12-31", "%Y-%m-%d")), col = "red")
# Chunk 25
plot_by_day
# Chunk 26
spd_raw <- read_csv("https://raw.githubusercontent.com/clanfear/CSSS508/master/Seattle_Police_Department_911_Incident_Response.csv")
# Chunk 27
str(spd_raw$`Event Clearance Date`)
# Chunk 28
# install.packages("lubridate")
library(lubridate)
spd <- spd_raw %>% mutate(`Event Clearance Date` = mdy_hms(`Event Clearance Date`, tz = "America/Los_Angeles"))
str(spd$`Event Clearance Date`)
# Chunk 29
demo_dts <- spd$`Event Clearance Date`[1:2]
(date_only <- as.Date(demo_dts, tz = "America/Los_Angeles"))
(day_of_week_only <- weekdays(demo_dts))
(one_hour_later <- demo_dts + dhours(1))
# Chunk 30
spd_times <- spd %>%
select(`Initial Type Group`, `Event Clearance Date`) %>%
mutate(hour = hour(`Event Clearance Date`))
time_spd_plot <- ggplot(spd_times, aes(x = hour)) +
geom_histogram(binwidth = 2) +
facet_wrap( ~ `Initial Type Group`) +
theme_minimal() +
theme(strip.text.x = element_text(size = rel(0.6)))
# Chunk 31
time_spd_plot
# Chunk 32
library(forcats)
str(spd_times$`Initial Type Group`)
spd_times$`Initial Type Group` <- parse_factor(spd_times$`Initial Type Group`, levels=NULL)
str(spd_times$`Initial Type Group`)
head(as.numeric(spd_times$`Initial Type Group`))
# Chunk 33
spd_vol <- spd_times %>% group_by(`Initial Type Group`) %>%
summarize(n_events = n()) %>% arrange(desc(n_events))
# set levels using order from sorted frequency table
spd_times_2 <- spd_times %>% mutate(`Initial Type Group` = parse_factor(`Initial Type Group`, levels = spd_vol$`Initial Type Group`))
# replot
time_spd_plot_2 <- ggplot(spd_times_2, aes(x = hour)) +
geom_histogram(binwidth = 2) +
facet_wrap( ~ `Initial Type Group`) +
theme_minimal() +
theme(strip.text.x = element_text(size = rel(0.6)))
# Chunk 34
time_spd_plot_2
# Chunk 35
jayz <- billboard_2000 %>% filter(artist == "Jay-Z") %>%
mutate(track = factor(track))
jayz_bad_legend <- ggplot(jayz, aes(x = week, y = rank, group = track, color = track)) +
geom_line() + theme_bw() +
scale_y_reverse(limits = c(100, 0)) +
theme(legend.position = c(0.80, 0.25),
legend.background = element_rect(fill="transparent"))
# Chunk 36
jayz_bad_legend
# Chunk 37
jayz <- jayz %>% mutate(track = fct_reorder(track, rank, min)) # same as reorder()
jayz_good_legend <- ggplot(jayz, aes(x = week, y = rank, group = track, color = track)) +
geom_line() + theme_bw() +
scale_y_reverse(limits = c(100, 0)) +
theme(legend.position = c(0.80, 0.25),
legend.background = element_rect(fill="transparent"))
# Chunk 38
jayz_good_legend
jayz_biggest <- jayz %>% filter(track %in% c("I Just Wanna Love U ...", "Big Pimpin'"))
levels(jayz_biggest$track)
jayz_biggest <- jayz_biggest %>% fct_drop(.) # same as droplevels()
jayz_biggest <- jayz_biggest %>% droplevels(.)
levels(jayz_biggest$track)
# DO NOT EDIT ANY PART OF THIS CHUNK
# Do examine the code if you're interested how it works!
knitr::opts_chunk$set(echo = TRUE, warning=TRUE, message=TRUE)
library(tidyverse)
set.seed(7)
test_x <- function(x=NULL, class="omit", dims="omit", numeric="omit",
nam_pos="omit", nam_val="omit", c_pos="omit", c_val="omit",
na_check="omit"){
if(is.null(x)){
return(message("No code entered yet."))
} else {
class_x  <- ifelse(class!="omit", class(x)==class, TRUE)
num_x    <- ifelse(numeric!="omit", is.numeric(x)==numeric, TRUE)
dim_x    <- ifelse(all(dims!="omit"),
ifelse(is.null(dim(x)), length(x)==dims, all(dim(x)==dims) ),
TRUE)
names_x  <- ifelse(nam_val!="omit" & nam_pos!="omit",
ifelse(is.null(names(x)), FALSE, names(x)[nam_pos]==nam_val), TRUE)
if(any(c_val=="omit") | any(c_pos=="omit")){ check_x <- TRUE
} else {
if (dim_x==FALSE){
check_x <- FALSE
} else {
if(length(c_pos)==1 & class_x!="list"){ check_x <- x[c_pos]==c_val
} else {
if(class=="matrix" | class=="data.frame"){ check_x <- x[ c_pos[1], c_pos[2] ]==c_val
} else {
if(class=="list" & length(c_pos)==2){ check_x <- x[[ c_pos[1] ]][[ c_pos[2] ]]==c_val
} else {
if(class=="list" & length(c_pos)==3){ check_x <- x[[ c_pos[1] ]][[c_pos[2] ]][[ c_pos[3] ]]==c_val
}
}
}
}
}
}
if (all(na_check!="omit") & is.null(dim(x))){
na_x     <- any(is.na(x[na_check])==TRUE)==FALSE
} else {
if (all(na_check!= "omit") & is.null(dim(x))==FALSE & length(na_check)==2 ){
na_x     <- any(is.na(x[na_check[1], na_check[2]])==TRUE)==FALSE
} else {
if (all(na_check!= "omit") & is.null(dim(x))==FALSE & length(na_check)==1){
na_x     <- any(is.na(x[, na_check])==TRUE)==FALSE
} else {na_x <- TRUE}
}
}
if (all(c(class_x, dim_x, names_x, num_x, na_x, check_x)==TRUE)){
message("Good job on ", deparse(substitute(x)), "!\n")
} else {
message("Oh no, check your code for \"", deparse(substitute(x)), "\"\n")
if (dim_x==FALSE)   message("- Wrong length or dimensions!\n")
if (class_x==FALSE) message("- Wrong object class!\n")
if (names_x==FALSE) message("- Wrong object names!\n")
if (num_x==FALSE)   message("- Should this be numeric?\n")
if (na_x==FALSE)    message("- You seem to have data missing!\n")
if (check_x==FALSE) message("- You seem to have an incorrect or misplaced value somewhere!\n")
}
}
}
# Ex 1) Create a vector of the numbers 1, 5, 3, 2, 4.
example <- NULL
# You would write this:
example <- c(1,5,3,2,4)
# Ex 2) Add the number 10 to the sixth position of example2
example2 <- example
example2 <- NULL
# You would write:
example2[6] <- 10
# 1) Use "seq()" to create a vector of 10 numbers evenly spaced from 0 to 15.
vec_num <- seq(0, 15, length.out = 10)
# 2) Use ":" to create an integer vector of the numbers 11 through 20.
vec_int <- 11:20
# 3) Use "LETTERS" and "[ ]" to create a vector of the last 10 capital letters.
vec_cha <- LETTERS[17:26]
# 4) Use letters and "[ ]" to create a factor variable using the first ten lower case letters.
vec_fac <- factor(letters[1:10])
# 5) Use "c()" to combine "vec_cha" and "vec_fac" into "vec_let". Do not convert it to a factor!
vec_let <- c(vec_cha, vec_fac)
# 6) Use "c()" and [ ] to combine the first 4 elements of "vec_num" with the last
# 4 elements of "vec_int" to create "vec_ni".
vec_ni <- c(vec_num[c(1, 2, 3, 4)], vec_int[c(7, 8, 9, 10)])
# 7) Use "rev()" to reverse the order of "vec_fac".
fac_vec <- rev(vec_fac)
# DO NOT EDIT ANY PART OF THIS CHUNK
test_x(vec_num, class="numeric",   dims=10, c_pos=10, c_val=15)
test_x(vec_int, class="integer",   dims=10, c_pos=5,  c_val=15)
test_x(vec_cha, class="character", dims=10, c_pos=3,  c_val="S")
test_x(vec_fac, class="factor",    dims=10, c_pos=7,  c_val="g")
test_x(vec_let, class="character", dims=20, c_pos=19, c_val="9")
test_x(vec_ni,  class="numeric",   dims=8,  c_pos=5,  c_val=17)
test_x(fac_vec, class="factor", dims=10, c_pos=4, c_val="g")
new_vec <- c(TRUE, FALSE, TRUE, TRUE)
# 1) Use matrix() to create a matrix with 10 rows and four columns filled with NA
mat_empty <- matrix(NA, nrow = 10, ncol = 4)
# 2) Assign "vec_num" to the first column of "mat_1"" below.
mat_1 <- mat_empty # DO NOT EDIT THIS LINE; add code below it.
mat_1 <- cbind(c(vec_num), mat_empty[1:10,2:4])
# 3) Assign "vec_int" to the second column of "mat_2" below
mat_2 <- mat_1 # DO NOT EDIT THIS LINE; add code below it.
mat_2 <- cbind(mat_1[1:10,1],c(vec_int), mat_empty[1:10,3:4])
# 4) Assign "vec_cha" and "vec_fac" to the third and fourth columns of "mat_3" using one assignment operator.
mat_3 <- mat_2 # DO NOT EDIT THIS LINE; add code below it.
mat_3 <- cbind(mat_1[1:10,1], mat_2[1:10,2], c(vec_cha), c(vec_fac))
# 5) Select the fourth row from "mat_3" and assign it to the object "row_4" as a vector.
row_4 <- mat_3[4, ]
# 6) Assign the element in the 6th row and 2nd column of "mat_3" to "val_6_2" as a numeric value.
val_6_2 <- as.vector(mat_3[6,2])
# 7) Use "cbind()" to combine "vec_num", "vec_int", "vec_cha", and "vec_fac" into "mat_4".
mat_4 <- cbind(vec_num, vec_int, vec_cha, vec_fac)
# 8) Next, first transpose mat_4, then select only the first four columns and assign to mat_t
mat_t <- t(mat_4)[,1:4]
# 9)  Then use rbind() to add the rows from mat_3 to this and assign this combination to mat_big.
mat_big <- rbind(mat_t, mat_3)
# DO NOT EDIT ANY PART OF THIS CHUNK
test_x(mat_empty, class="matrix", dims=c(10,4))
test_x(mat_1, class="matrix", dims=c(10,4), numeric=TRUE, na_check=1)
test_x(mat_2, class="matrix", dims=c(10,4), numeric=TRUE, na_check=2)
test_x(mat_3, class="matrix", dims=c(10,4), numeric=FALSE, na_check=3, c_pos=c(2,3), c_val="R")
test_x(row_4, class="character", dims=4, numeric=FALSE, na_check=1, c_pos=2, c_val=14)
test_x(val_6_2, class="numeric", dims=1, numeric=TRUE, na_check=1, c_pos=1, c_val=16)
test_x(mat_4, class="matrix", dims=c(10,4), numeric=FALSE, na_check=3, c_pos=c(5,3), c_val="U")
test_x(mat_t, class="matrix", dims=c(4,4), numeric=FALSE, na_check=2, c_pos=c(2,2), c_val="12")
test_x(mat_big, class="matrix", dims=c(14,4), numeric=FALSE, na_check=3, c_pos=c(2,3), c_val="13")
mat)3[6,2]
mat_3[6,2]
